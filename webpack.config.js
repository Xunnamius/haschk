/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

require("source-map-support/register");

var _package = _interopRequireDefault(require("./package"));

var _webpack = _interopRequireDefault(require("webpack"));

var _cleanWebpackPlugin = require("clean-webpack-plugin");

var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _writeFileWebpackPlugin = _interopRequireDefault(require("write-file-webpack-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();

const {
  URN_PREFIX,
  HASHING_ALGORITHM,
  APPLICATION_LABEL,
  MAX_REQUEST_HISTORY,
  BASE32_URN_LENGTH
} = process.env;
const paths = {};
paths.src = `${__dirname}/src`;
paths.gitIgnore = `${__dirname}/.gitignore`;
paths.build = `${__dirname}/build`;
paths.buildAssets = `${paths.build}/assets`;
paths.manifest = `${paths.src}/manifest.json`;
paths.components = `${paths.src}/components`;
paths.universe = `${paths.src}/universe`;
paths.assets = `${paths.src}/assets`;
const assetExtensions = ['jpg', 'jpeg', 'png', `gif`, "eot", 'otf', 'svg', 'ttf', 'woff', 'woff2'];

const configure = NODE_ENV => {
  NODE_ENV = NODE_ENV || 'production';
  const DEV_ENV = NODE_ENV === 'development';
  const options = {};
  options.mode = DEV_ENV ? 'development' : 'production';
  options.entry = {
    background: [`${paths.components}/background/index.js`],
    options: [`${paths.components}/options/index.js`],
    popup: [`${paths.components}/popup/index.js`]
  };
  options.output = {
    path: paths.build,
    filename: '[name].packed.js'
  };
  options.module = {
    rules: [{
      test: /\.css$/,
      loader: 'style-loader!css-loader',
      exclude: /node_modules/
    }, {
      test: new RegExp(`\\.(${assetExtensions.join('|')})$`),
      loader: 'file-loader?name=[name].[ext]',
      exclude: /node_modules/
    }, {
      test: /\.html$/,
      loader: 'html-loader',
      exclude: /node_modules/
    }, {
      test: /\.js$/,
      loader: 'babel-loader?cacheDirectory',
      exclude: /node_modules/
    }]
  };
  options.plugins = [new _cleanWebpackPlugin.CleanWebpackPlugin(), new _webpack.default.DefinePlugin({
    _NODE_ENV: JSON.stringify(NODE_ENV),
    _HASHING_ALGORITHM: JSON.stringify(HASHING_ALGORITHM || 'SHA-256'),
    _APPLICATION_LABEL: JSON.stringify(APPLICATION_LABEL || '_haschk'),
    _MAX_REQUEST_HISTORY: JSON.stringify(MAX_REQUEST_HISTORY || 1000),
    _BASE32_URN_LENGTH: JSON.stringify(BASE32_URN_LENGTH || 112),
    _URN_PREFIX: JSON.stringify(URN_PREFIX || '::::')
  }), new _copyWebpackPlugin.default([{
    from: paths.manifest,
    transform: content => Buffer.from(JSON.stringify({
      name: `${DEV_ENV ? "DEV-" : ''}${_package.default.name}`,
      description: _package.default.description,
      version: _package.default.version,
      'content_security_policy': `script-src 'self'${DEV_ENV ? " 'unsafe-eval'" : ''}; object-src 'self'`,
      ...JSON.parse(content.toString())
    }))
  }]), new _copyWebpackPlugin.default([{
    from: `${paths.assets}/icon/**/*.png`,
    to: `${paths.buildAssets}/icon/[1]`,
    test: /.*\/icon\/(.*)$/
  }]), new _htmlWebpackPlugin.default({
    template: `${paths.src}/popup.html`,
    filename: 'popup.html',
    chunks: ['popup']
  }), new _htmlWebpackPlugin.default({
    template: `${paths.src}/options.html`,
    filename: 'options.html',
    chunks: ['options']
  }), new _htmlWebpackPlugin.default({
    template: `${paths.src}/background.html`,
    filename: 'background.html',
    chunks: ['background']
  }), new _htmlWebpackPlugin.default({
    template: `${paths.src}/welcome.html`,
    filename: 'welcome.html',
    chunks: []
  }), new _writeFileWebpackPlugin.default()];
  options.resolve = {};
  options.resolve.alias = {
    'components': paths.components,
    'universe': paths.universe
  };
  if (DEV_ENV) options.devtool = 'cheap-module-eval-source-map';

  if (NODE_ENV !== 'generator') {
    options.resolve.mainFields = ['browser', 'main'];
  }

  return options;
};

module.exports = env => configure(env.NODE_ENV);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,