/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

require("source-map-support/register");

var _package = _interopRequireDefault(require("./package"));

var _webpack = _interopRequireDefault(require("webpack"));

var _cleanWebpackPlugin = _interopRequireDefault(require("clean-webpack-plugin"));

var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _writeFileWebpackPlugin = _interopRequireDefault(require("write-file-webpack-plugin"));

var _parseGitignore = _interopRequireDefault(require("parse-gitignore"));

var _fs = require("fs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();

const {
  NODE_ENV,
  HASHING_ALGORITHM,
  HASHING_OUTPUT_LENGTH
} = process.env;
const DEV_ENV = NODE_ENV === 'development';
const paths = {};
paths.src = `${__dirname}/src`;
paths.build = `${__dirname}/build`;
paths.buildAssets = `${paths.build}/assets`;
paths.buildGitIgnore = `${paths.build}/.gitignore`;
paths.srcManifest = `${paths.src}/manifest.json`;
paths.components = `${paths.src}/components`;
paths.assets = `${paths.src}/assets`;
const assetExtensions = ['jpg', 'jpeg', 'png', `gif`, "eot", 'otf', 'svg', 'ttf', 'woff', 'woff2'];
const options = {};
options.mode = DEV_ENV ? 'development' : 'production';
options.entry = {
  background: `${paths.components}/background/index.js`,
  options: `${paths.components}/options/index.js`,
  popup: `${paths.components}/popup/index.js`
};
options.output = {
  path: paths.build,
  filename: '[name].packed.js'
};
options.module = {
  rules: [{
    test: /\.css$/,
    loader: 'style-loader!css-loader',
    exclude: /node_modules/
  }, {
    test: new RegExp(`\\.(${assetExtensions.join('|')})$`),
    loader: 'file-loader?name=[name].[ext]',
    exclude: /node_modules/
  }, {
    test: /\.html$/,
    loader: 'html-loader',
    exclude: /node_modules/
  }, {
    test: /\.js$/,
    loader: 'babel-loader?cacheDirectory',
    exclude: /node_modules/
  }]
};
options.plugins = [new _webpack.default.DefinePlugin({
  'process.env': {
    NODE_ENV: JSON.stringify(NODE_ENV),
    HASHING_ALGORITHM: JSON.stringify(HASHING_ALGORITHM),
    HASHING_OUTPUT_LENGTH: JSON.stringify(HASHING_OUTPUT_LENGTH)
  }
}), new _copyWebpackPlugin.default([{
  from: paths.srcManifest,
  transform: content => Buffer.from(JSON.stringify({
    name: `${DEV_ENV ? "DEV-" : ''}${_package.default.name}`,
    description: _package.default.description,
    version: _package.default.version,
    'content_security_policy': `script-src 'self'${DEV_ENV ? " 'unsafe-eval'" : ''}; object-src 'self'`,
    ...JSON.parse(content.toString())
  }))
}]), new _copyWebpackPlugin.default([{
  from: `${paths.assets}/icon/**/*.png`,
  to: `${paths.buildAssets}/icon/[1]`,
  test: /.*\/icon\/(.*)$/
}]), new _htmlWebpackPlugin.default({
  template: `${paths.src}/popup.html`,
  filename: 'popup.html',
  chunks: ['popup']
}), new _htmlWebpackPlugin.default({
  template: `${paths.src}/options.html`,
  filename: 'options.html',
  chunks: ['options']
}), new _htmlWebpackPlugin.default({
  template: `${paths.src}/background.html`,
  filename: 'background.html',
  chunks: ['background']
}), new _writeFileWebpackPlugin.default()];
options.resolve = {
  alias: {
    'dnschk-utils': `${__dirname}/src/components/utils/`
  }
};
if (DEV_ENV) options.devtool = 'cheap-module-eval-source-map';

if (NODE_ENV !== 'generator') {
  options.resolve.mainFields = ['browser', 'main'];
}

const exclude = (0, _parseGitignore.default)((0, _fs.readFileSync)(paths.buildGitIgnore)).filter(path => path.startsWith('!')).map(path => path.substr(1));
options.plugins = [new _cleanWebpackPlugin.default([paths.build], {
  exclude
}), ...options.plugins];
module.exports = options;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy93ZWJwYWNrLmNvbmZpZy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwiTk9ERV9FTlYiLCJIQVNISU5HX0FMR09SSVRITSIsIkhBU0hJTkdfT1VUUFVUX0xFTkdUSCIsInByb2Nlc3MiLCJlbnYiLCJERVZfRU5WIiwicGF0aHMiLCJzcmMiLCJfX2Rpcm5hbWUiLCJidWlsZCIsImJ1aWxkQXNzZXRzIiwiYnVpbGRHaXRJZ25vcmUiLCJzcmNNYW5pZmVzdCIsImNvbXBvbmVudHMiLCJhc3NldHMiLCJhc3NldEV4dGVuc2lvbnMiLCJvcHRpb25zIiwibW9kZSIsImVudHJ5IiwiYmFja2dyb3VuZCIsInBvcHVwIiwib3V0cHV0IiwicGF0aCIsImZpbGVuYW1lIiwibW9kdWxlIiwicnVsZXMiLCJ0ZXN0IiwibG9hZGVyIiwiZXhjbHVkZSIsIlJlZ0V4cCIsImpvaW4iLCJwbHVnaW5zIiwid2VicGFjayIsIkRlZmluZVBsdWdpbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJDb3B5V2VicGFja1BsdWdpbiIsImZyb20iLCJ0cmFuc2Zvcm0iLCJjb250ZW50IiwiQnVmZmVyIiwibmFtZSIsInBrZyIsImRlc2NyaXB0aW9uIiwidmVyc2lvbiIsInBhcnNlIiwidG9TdHJpbmciLCJ0byIsIkh0bWxXZWJwYWNrUGx1Z2luIiwidGVtcGxhdGUiLCJjaHVua3MiLCJXcml0ZUZpbGVXZWJwYWNrUGx1Z2luIiwicmVzb2x2ZSIsImFsaWFzIiwiZGV2dG9vbCIsIm1haW5GaWVsZHMiLCJmaWx0ZXIiLCJzdGFydHNXaXRoIiwibWFwIiwic3Vic3RyIiwiQ2xlYW5XZWJwYWNrUGx1Z2luIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUFBLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JDLE1BQWxCOztBQUVBLE1BQU07QUFBRUMsRUFBQUEsUUFBRjtBQUFZQyxF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ZCxJQUFJRiwwQkFBSixDQUFzQjtBQUNsQkMsRUFBQUEsUUFBUSxFQUFHLEdBQUUzQyxLQUFLLENBQUNDLEdBQUksa0JBREw7QUFFbEJnQixFQUFBQSxRQUFRLEVBQUUsaUJBRlE7QUFHbEIyQixFQUFBQSxNQUFNLEVBQUUsQ0FBQyxZQUFEO0FBSFUsQ0FBdEIsQ0E1Q2MsRUFrRGQsSUFBSUMsK0JBQUosRUFsRGMsQ0FBbEI7QUFxREFuQyxPQUFPLENBQUNvQyxPQUFSLEdBQWtCO0FBRWRDLEVBQUFBLEtBQUssRUFBRTtBQUNILG9CQUFpQixHQUFFN0MsU0FBVTtBQUQxQjtBQUZPLENBQWxCO0FBUUEsSUFBR0gsT0FBSCxFQUNJVyxPQUFPLENBQUNzQyxPQUFSLEdBQWtCLDhCQUFsQjs7QUFFSixJQUFHdEQsUUFBUSxLQUFLLFdBQWhCLEVBQ0E7QUFFSWdCLEVBQUFBLE9BQU8sQ0FBQ29DLE9BQVIsQ0FBZ0JHLFVBQWhCLEdBQTZCLENBQUMsU0FBRCxFQUFZLE1BQVosQ0FBN0I7QUFDSDs7QUFFRCxNQUFNM0IsT0FBTyxHQUFHLDZCQUFlLHNCQUFhdEIsS0FBSyxDQUFDSyxjQUFuQixDQUFmLEVBQ1g2QyxNQURXLENBQ0psQyxJQUFJLElBQUlBLElBQUksQ0FBQ21DLFVBQUwsQ0FBZ0IsR0FBaEIsQ0FESixFQUVYQyxHQUZXLENBRVBwQyxJQUFJLElBQUlBLElBQUksQ0FBQ3FDLE1BQUwsQ0FBWSxDQUFaLENBRkQsQ0FBaEI7QUFLQTNDLE9BQU8sQ0FBQ2UsT0FBUixHQUFrQixDQUNkLElBQUk2QiwyQkFBSixDQUF1QixDQUFDdEQsS0FBSyxDQUFDRyxLQUFQLENBQXZCLEVBQXNDO0FBQUVtQixFQUFBQTtBQUFGLENBQXRDLENBRGMsRUFFZCxHQUFHWixPQUFPLENBQUNlLE9BRkcsQ0FBbEI7QUFLQVAsTUFBTSxDQUFDcUMsT0FBUCxHQUFpQjdDLE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuLy8gZmxvdy1kaXNhYmxlLWxpbmVcbmltcG9ydCBwa2cgZnJvbSAnLi9wYWNrYWdlJ1xuaW1wb3J0IHdlYnBhY2sgZnJvbSAnd2VicGFjaydcbmltcG9ydCBDbGVhbldlYnBhY2tQbHVnaW4gZnJvbSAnY2xlYW4td2VicGFjay1wbHVnaW4nXG5pbXBvcnQgQ29weVdlYnBhY2tQbHVnaW4gZnJvbSAnY29weS13ZWJwYWNrLXBsdWdpbidcbmltcG9ydCBIdG1sV2VicGFja1BsdWdpbiBmcm9tICdodG1sLXdlYnBhY2stcGx1Z2luJ1xuaW1wb3J0IFdyaXRlRmlsZVdlYnBhY2tQbHVnaW4gZnJvbSAnd3JpdGUtZmlsZS13ZWJwYWNrLXBsdWdpbidcbmltcG9ydCBwYXJzZUdpdElnbm9yZSBmcm9tICdwYXJzZS1naXRpZ25vcmUnXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcydcblxucmVxdWlyZSgnZG90ZW52JykuY29uZmlnKCk7XG5cbmNvbnN0IHsgTk9ERV9FTlYsIEhBU0hJTkdfQUxHT1JJVEhNLCBIQVNISU5HX09VVFBVVF9MRU5HVEggfSA9IHByb2Nlc3MuZW52O1xuY29uc3QgREVWX0VOViA9IE5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnO1xuXG5jb25zdCBwYXRocyA9IHt9O1xuXG5wYXRocy5zcmMgPSBgJHtfX2Rpcm5hbWV9L3NyY2A7XG5wYXRocy5idWlsZCA9IGAke19fZGlybmFtZX0vYnVpbGRgO1xucGF0aHMuYnVpbGRBc3NldHMgPSBgJHtwYXRocy5idWlsZH0vYXNzZXRzYDtcbnBhdGhzLmJ1aWxkR2l0SWdub3JlID0gYCR7cGF0aHMuYnVpbGR9Ly5naXRpZ25vcmVgO1xucGF0aHMuc3JjTWFuaWZlc3QgPSBgJHtwYXRocy5zcmN9L21hbmlmZXN0Lmpzb25gO1xucGF0aHMuY29tcG9uZW50cyA9IGAke3BhdGhzLnNyY30vY29tcG9uZW50c2A7XG5wYXRocy5hc3NldHMgPSBgJHtwYXRocy5zcmN9L2Fzc2V0c2A7XG5jb25zdCBhc3NldEV4dGVuc2lvbnMgPSBbJ2pwZycsICdqcGVnJywgJ3BuZycsIGBnaWZgLCBcImVvdFwiLCAnb3RmJywgJ3N2ZycsICd0dGYnLCAnd29mZicsICd3b2ZmMiddO1xuXG4vLyAqIFdlYnBhY2sgY29uZmlndXJhdGlvbiBvcHRpb25zXG5cbmNvbnN0IG9wdGlvbnM6IE9iamVjdCA9IHt9O1xuXG5vcHRpb25zLm1vZGUgPSBERVZfRU5WID8gJ2RldmVsb3BtZW50JyA6ICdwcm9kdWN0aW9uJztcblxub3B0aW9ucy5lbnRyeSA9IHtcbiAgICBiYWNrZ3JvdW5kOiBgJHtwYXRocy5jb21wb25lbnRzfS9iYWNrZ3JvdW5kL2luZGV4LmpzYCxcbiAgICBvcHRpb25zOiBgJHtwYXRocy5jb21wb25lbnRzfS9vcHRpb25zL2luZGV4LmpzYCxcbiAgICBwb3B1cDogYCR7cGF0aHMuY29tcG9uZW50c30vcG9wdXAvaW5kZXguanNgXG59O1xuXG5vcHRpb25zLm91dHB1dCA9IHtcbiAgICBwYXRoOiBwYXRocy5idWlsZCxcbiAgICBmaWxlbmFtZTogJ1tuYW1lXS5wYWNrZWQuanMnXG59O1xuXG5vcHRpb25zLm1vZHVsZSA9IHtcbiAgICBydWxlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICB0ZXN0OiAvXFwuY3NzJC8sXG4gICAgICAgICAgICBsb2FkZXI6ICdzdHlsZS1sb2FkZXIhY3NzLWxvYWRlcicsXG4gICAgICAgICAgICBleGNsdWRlOiAvbm9kZV9tb2R1bGVzL1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZXN0OiBuZXcgUmVnRXhwKGBcXFxcLigke2Fzc2V0RXh0ZW5zaW9ucy5qb2luKCd8Jyl9KSRgKSxcbiAgICAgICAgICAgIGxvYWRlcjogJ2ZpbGUtbG9hZGVyP25hbWU9W25hbWVdLltleHRdJyxcbiAgICAgICAgICAgIGV4Y2x1ZGU6IC9ub2RlX21vZHVsZXMvXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlc3Q6IC9cXC5odG1sJC8sXG4gICAgICAgICAgICBsb2FkZXI6ICdodG1sLWxvYWRlcicsXG4gICAgICAgICAgICBleGNsdWRlOiAvbm9kZV9tb2R1bGVzL1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZXN0OiAvXFwuanMkLyxcbiAgICAgICAgICAgIGxvYWRlcjogJ2JhYmVsLWxvYWRlcj9jYWNoZURpcmVjdG9yeScsXG4gICAgICAgICAgICBleGNsdWRlOiAvbm9kZV9tb2R1bGVzL1xuICAgICAgICB9XG4gICAgXVxufTtcblxub3B0aW9ucy5wbHVnaW5zID0gW1xuICAgIC8vID8gQ2xlYW4gcGF0aHMuYnVpbGQgKHNlZSBiZWxvdylcbiAgICAvLyBuZXcgQ2xlYW5XZWJwYWNrUGx1Z2luKFsnYnVpbGQnXSksXG5cbiAgICAvLyA/IEV4cG9zZSBkZXNpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlcyBpbiB0aGUgcGFja2VkIGJ1bmRsZVxuICAgIG5ldyB3ZWJwYWNrLkRlZmluZVBsdWdpbih7XG4gICAgICAgICdwcm9jZXNzLmVudic6IHtcbiAgICAgICAgICAgIE5PREVfRU5WOiBKU09OLnN0cmluZ2lmeShOT0RFX0VOViksXG4gICAgICAgICAgICBIQVNISU5HX0FMR09SSVRITTogSlNPTi5zdHJpbmdpZnkoSEFTSElOR19BTEdPUklUSE0pLFxuICAgICAgICAgICAgSEFTSElOR19PVVRQVVRfTEVOR1RIOiBKU09OLnN0cmluZ2lmeShIQVNISU5HX09VVFBVVF9MRU5HVEgpLFxuICAgICAgICB9LFxuICAgIH0pLFxuXG4gICAgbmV3IENvcHlXZWJwYWNrUGx1Z2luKFt7XG4gICAgICAgIGZyb206IHBhdGhzLnNyY01hbmlmZXN0LFxuXG4gICAgICAgIC8vID8gR2VuZXJhdGVzIG91ciBtYW5pZmVzdCBmaWxlIHVzaW5nIGluZm8gZnJvbSBwYWNrYWdlLmpzb25cbiAgICAgICAgdHJhbnNmb3JtOiBjb250ZW50ID0+IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG5hbWU6IGAke0RFVl9FTlYgPyBcIkRFVi1cIiA6ICcnfSR7cGtnLm5hbWV9YCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwa2cuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB2ZXJzaW9uOiBwa2cudmVyc2lvbixcbiAgICAgICAgICAgICdjb250ZW50X3NlY3VyaXR5X3BvbGljeSc6IGBzY3JpcHQtc3JjICdzZWxmJyR7REVWX0VOViA/IFwiICd1bnNhZmUtZXZhbCdcIiA6ICcnfTsgb2JqZWN0LXNyYyAnc2VsZidgLFxuICAgICAgICAgICAgLi4uSlNPTi5wYXJzZShjb250ZW50LnRvU3RyaW5nKCkpXG4gICAgICAgIH0pKVxuICAgIH1dKSxcblxuICAgIG5ldyBDb3B5V2VicGFja1BsdWdpbihbe1xuICAgICAgICBmcm9tOiBgJHtwYXRocy5hc3NldHN9L2ljb24vKiovKi5wbmdgLFxuICAgICAgICB0bzogYCR7cGF0aHMuYnVpbGRBc3NldHN9L2ljb24vWzFdYCxcbiAgICAgICAgdGVzdDogLy4qXFwvaWNvblxcLyguKikkL1xuICAgIH1dKSxcblxuICAgIG5ldyBIdG1sV2VicGFja1BsdWdpbih7XG4gICAgICAgIHRlbXBsYXRlOiBgJHtwYXRocy5zcmN9L3BvcHVwLmh0bWxgLFxuICAgICAgICBmaWxlbmFtZTogJ3BvcHVwLmh0bWwnLFxuICAgICAgICBjaHVua3M6IFsncG9wdXAnXVxuICAgIH0pLFxuXG4gICAgbmV3IEh0bWxXZWJwYWNrUGx1Z2luKHtcbiAgICAgICAgdGVtcGxhdGU6IGAke3BhdGhzLnNyY30vb3B0aW9ucy5odG1sYCxcbiAgICAgICAgZmlsZW5hbWU6ICdvcHRpb25zLmh0bWwnLFxuICAgICAgICBjaHVua3M6IFsnb3B0aW9ucyddXG4gICAgfSksXG5cbiAgICBuZXcgSHRtbFdlYnBhY2tQbHVnaW4oe1xuICAgICAgICB0ZW1wbGF0ZTogYCR7cGF0aHMuc3JjfS9iYWNrZ3JvdW5kLmh0bWxgLFxuICAgICAgICBmaWxlbmFtZTogJ2JhY2tncm91bmQuaHRtbCcsXG4gICAgICAgIGNodW5rczogWydiYWNrZ3JvdW5kJ11cbiAgICB9KSxcblxuICAgIG5ldyBXcml0ZUZpbGVXZWJwYWNrUGx1Z2luKClcbl07XG5cbm9wdGlvbnMucmVzb2x2ZSA9IHtcbiAgICAvLyA/IFRoZXNlIGFyZSBhbGlhc2VzIHRoYXQgY2FuIGJlIHVzZWQgZHVyaW5nIEpTIGltcG9ydCBjYWxsc1xuICAgIGFsaWFzOiB7XG4gICAgICAgICdkbnNjaGstdXRpbHMnOiBgJHtfX2Rpcm5hbWV9L3NyYy9jb21wb25lbnRzL3V0aWxzL2BcbiAgICB9XG59O1xuXG4vLyA/IFNlZTogaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25maWd1cmF0aW9uL2RldnRvb2xcbmlmKERFVl9FTlYpXG4gICAgb3B0aW9ucy5kZXZ0b29sID0gJ2NoZWFwLW1vZHVsZS1ldmFsLXNvdXJjZS1tYXAnO1xuXG5pZihOT0RFX0VOViAhPT0gJ2dlbmVyYXRvcicpXG57XG4gICAgLy8gPyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9pcGZzL2pzLWlwZnMtYXBpL3B1bGwvNzc3XG4gICAgb3B0aW9ucy5yZXNvbHZlLm1haW5GaWVsZHMgPSBbJ2Jyb3dzZXInLCAnbWFpbiddO1xufVxuXG5jb25zdCBleGNsdWRlID0gcGFyc2VHaXRJZ25vcmUocmVhZEZpbGVTeW5jKHBhdGhzLmJ1aWxkR2l0SWdub3JlKSlcbiAgICAuZmlsdGVyKHBhdGggPT4gcGF0aC5zdGFydHNXaXRoKCchJykpXG4gICAgLm1hcChwYXRoID0+IHBhdGguc3Vic3RyKDEpKTtcblxuLy8gPyBUaGlzIGZvbGxvd2luZyBpcyBuZWNlc3Nhcnkgc28gQ2xlYW5XZWJwYWNrUGx1Z2luIGRvZXNuJ3Qga2lsbCBidWlsZC8uZ2l0aWdub3JlXG5vcHRpb25zLnBsdWdpbnMgPSBbXG4gICAgbmV3IENsZWFuV2VicGFja1BsdWdpbihbcGF0aHMuYnVpbGRdLCB7IGV4Y2x1ZGUgfSksXG4gICAgLi4ub3B0aW9ucy5wbHVnaW5zXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9wdGlvbnM7XG4iXX0=