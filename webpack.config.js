/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

require("source-map-support/register");

var _package = _interopRequireDefault(require("./package"));

var _webpack = _interopRequireDefault(require("webpack"));

var _cleanWebpackPlugin = _interopRequireDefault(require("clean-webpack-plugin"));

var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _writeFileWebpackPlugin = _interopRequireDefault(require("write-file-webpack-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();

const {
  NODE_ENV
} = process.env;
const DEV_ENV = NODE_ENV === 'development';
const paths = {};
paths.src = `${__dirname}/src`;
paths.build = `${__dirname}/build`;
paths.srcManifest = `${paths.src}/manifest.json`;
const assetExtensions = ['jpg', 'jpeg', 'png', `gif`, "eot", 'otf', 'svg', 'ttf', 'woff', 'woff2'];
const options = {};
options.entry = {
  background: `${paths.src}/background.js`,
  options: `${paths.src}/options.js`,
  popup: `${paths.src}/popup.js`
};
options.output = {
  path: paths.build,
  filename: '[name].packed.js'
};
options.module = {
  rules: [{
    test: /\.css$/,
    loader: 'style-loader!css-loader',
    exclude: /node_modules/
  }, {
    test: new RegExp(`\\.(${assetExtensions.join('|')})$`),
    loader: 'file-loader?name=[name].[ext]',
    exclude: /node_modules/
  }, {
    test: /\.html$/,
    loader: 'html-loader',
    exclude: /node_modules/
  }]
};
options.plugins = [new _cleanWebpackPlugin.default(['build']), new _webpack.default.DefinePlugin({
  'process.env.NODE_ENV': JSON.stringify(NODE_ENV)
}), new _copyWebpackPlugin.default([{
  from: paths.srcManifest,
  transform: content => Buffer.from(JSON.stringify({
    name: `${DEV_ENV ? "DEV-" : ''}${_package.default.name}`,
    description: _package.default.description,
    version: _package.default.version,
    'content_security_policy': `script-src 'self'${DEV_ENV ? " 'unsafe-eval'" : ''}; object-src 'self'`,
    ...JSON.parse(content.toString())
  }))
}]), new _htmlWebpackPlugin.default({
  template: `${paths.src}/popup.html`,
  filename: 'popup.html',
  chunks: ['popup']
}), new _htmlWebpackPlugin.default({
  template: `${paths.src}/options.html`,
  filename: 'options.html',
  chunks: ['options']
}), new _htmlWebpackPlugin.default({
  template: `${paths.src}/background.html`,
  filename: 'background.html',
  chunks: ['background']
}), new _writeFileWebpackPlugin.default()];
if (NODE_ENV === 'development') options.devtool = 'cheap-module-eval-source-map';
module.exports = options;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy93ZWJwYWNrLmNvbmZpZy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwiTk9ERV9FTlYiLCJwcm9jZXNzIiwiZW52IiwiREVWX0VOViIsInBhdGhzIiwic3JjIiwiX19kaXJuYW1lIiwiYnVpbGQiLCJzcmNNYW5pZmVzdCIsImFzc2V0RXh0ZW5zaW9ucyIsIm9wdGlvbnMiLCJlbnRyeSIsImJhY2tncm91bmQiLCJwb3B1cCIsIm91dHB1dCIsInBhdGgiLCJmaWxlbmFtZSIsIm1vZHVsZSIsInJ1bGVzIiwidGVzdCIsImxvYWRlciIsImV4Y2x1ZGUiLCJSZWdFeHAiLCJqb2luIiwicGx1Z2lucyIsIkNsZWFuV2VicGFja1BsdWdpbiIsIndlYnBhY2siLCJEZWZpbmVQbHVnaW4iLCJKU09OIiwic3RyaW5naWZ5IiwiQ29weVdlYnBhY2tQbHVnaW4iLCJmcm9tIiwidHJhbnNmb3JtIiwiY29udGVudCIsIkJ1ZmZlciIsIm5hbWUiLCJwa2ciLCJkZXNjcmlwdGlvbiIsInZlcnNpb24iLCJwYXJzZSIsInRvU3RyaW5nIiwiSHRtbFdlYnBhY2tQbHVnaW4iLCJ0ZW1wbGF0ZSIsImNodW5rcyIsIldyaXRlRmlsZVdlYnBhY2tQbHVnaW4iLCJkZXZ0b29sIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUFBLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JDLE1BQWxCOztBQUVBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFlQyxPQUFPLENBQUNDLEdBQTdCO0FBQ0EsTUFBTUMsT0FBTyxHQUFHSCxRQUFRLEtBQUssYUFBN0I7QUFFQSxNQUFNSSxLQUFLLEdBQUcsRUFBZDtBQUVBQSxLQUFLLENBQUNDLEdBQU4sR0FBYSxHQUFFQyxTQUFVLE1BQXpCO0FBQ0FGLEtBQUssQ0FBQ0csS0FBTixHQUFlLEdBQUVELFNBQVUsUUFBM0I7QUFDQUYsS0FBSyxDQUFDSSxXQUFO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Q0E1QmMsRUFrQ2QsSUFBSUYsMEJBQUosQ0FBc0I7QUFDbEJDLEVBQUFBLFFBQVEsRUFBRyxHQUFFdEMsS0FBSyxDQUFDQyxHQUFJLGtCQURMO0FBRWxCVyxFQUFBQSxRQUFRLEVBQUUsaUJBRlE7QUFHbEIyQixFQUFBQSxNQUFNLEVBQUUsQ0FBQyxZQUFEO0FBSFUsQ0FBdEIsQ0FsQ2MsRUF3Q2QsSUFBSUMsK0JBQUosRUF4Q2MsQ0FBbEI7QUEyQ0EsSUFBRzVDLFFBQVEsS0FBSyxhQUFoQixFQUNJVSxPQUFPLENBQUNtQyxPQUFSLEdBQWtCLDhCQUFsQjtBQUVKNUIsTUFBTSxDQUFDNkIsT0FBUCxHQUFpQnBDLE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyogQGZsb3cgKi9cblxuLy8gZmxvdy1kaXNhYmxlLWxpbmVcbmltcG9ydCBwa2cgZnJvbSAnLi9wYWNrYWdlJ1xuaW1wb3J0IHdlYnBhY2sgZnJvbSAnd2VicGFjaydcbmltcG9ydCBDbGVhbldlYnBhY2tQbHVnaW4gZnJvbSAnY2xlYW4td2VicGFjay1wbHVnaW4nXG5pbXBvcnQgQ29weVdlYnBhY2tQbHVnaW4gZnJvbSAnY29weS13ZWJwYWNrLXBsdWdpbidcbmltcG9ydCBIdG1sV2VicGFja1BsdWdpbiBmcm9tICdodG1sLXdlYnBhY2stcGx1Z2luJ1xuaW1wb3J0IFdyaXRlRmlsZVdlYnBhY2tQbHVnaW4gZnJvbSAnd3JpdGUtZmlsZS13ZWJwYWNrLXBsdWdpbidcblxucmVxdWlyZSgnZG90ZW52JykuY29uZmlnKCk7XG5cbmNvbnN0IHsgTk9ERV9FTlYgfSA9IHByb2Nlc3MuZW52O1xuY29uc3QgREVWX0VOViA9IE5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnO1xuXG5jb25zdCBwYXRocyA9IHt9O1xuXG5wYXRocy5zcmMgPSBgJHtfX2Rpcm5hbWV9L3NyY2A7XG5wYXRocy5idWlsZCA9IGAke19fZGlybmFtZX0vYnVpbGRgO1xucGF0aHMuc3JjTWFuaWZlc3QgPSBgJHtwYXRocy5zcmN9L21hbmlmZXN0Lmpzb25gO1xuXG5jb25zdCBhc3NldEV4dGVuc2lvbnMgPSBbJ2pwZycsICdqcGVnJywgJ3BuZycsIGBnaWZgLCBcImVvdFwiLCAnb3RmJywgJ3N2ZycsICd0dGYnLCAnd29mZicsICd3b2ZmMiddO1xuXG4vLyAqIFdlYnBhY2sgY29uZmlndXJhdGlvbiBvcHRpb25zXG5cbmNvbnN0IG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5lbnRyeSA9IHtcbiAgICBiYWNrZ3JvdW5kOiBgJHtwYXRocy5zcmN9L2JhY2tncm91bmQuanNgLFxuICAgIG9wdGlvbnM6IGAke3BhdGhzLnNyY30vb3B0aW9ucy5qc2AsXG4gICAgcG9wdXA6IGAke3BhdGhzLnNyY30vcG9wdXAuanNgXG59O1xuXG5vcHRpb25zLm91dHB1dCA9IHtcbiAgICBwYXRoOiBwYXRocy5idWlsZCxcbiAgICBmaWxlbmFtZTogJ1tuYW1lXS5wYWNrZWQuanMnXG59O1xuXG5vcHRpb25zLm1vZHVsZSA9IHtcbiAgICBydWxlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICB0ZXN0OiAvXFwuY3NzJC8sXG4gICAgICAgICAgICBsb2FkZXI6ICdzdHlsZS1sb2FkZXIhY3NzLWxvYWRlcicsXG4gICAgICAgICAgICBleGNsdWRlOiAvbm9kZV9tb2R1bGVzL1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZXN0OiBuZXcgUmVnRXhwKGBcXFxcLigke2Fzc2V0RXh0ZW5zaW9ucy5qb2luKCd8Jyl9KSRgKSxcbiAgICAgICAgICAgIGxvYWRlcjogJ2ZpbGUtbG9hZGVyP25hbWU9W25hbWVdLltleHRdJyxcbiAgICAgICAgICAgIGV4Y2x1ZGU6IC9ub2RlX21vZHVsZXMvXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRlc3Q6IC9cXC5odG1sJC8sXG4gICAgICAgICAgICBsb2FkZXI6ICdodG1sLWxvYWRlcicsXG4gICAgICAgICAgICBleGNsdWRlOiAvbm9kZV9tb2R1bGVzL1xuICAgICAgICB9XG4gICAgXVxufTtcblxub3B0aW9ucy5wbHVnaW5zID0gW1xuICAgIC8vID8gQ2xlYW4gcGF0aHMuYnVpbGRcbiAgICBuZXcgQ2xlYW5XZWJwYWNrUGx1Z2luKFsnYnVpbGQnXSksXG5cbiAgICAvLyA/IEV4cG9zZSBkZXNpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlcyBpbiB0aGUgcGFja2VkIGJ1bmRsZVxuICAgIG5ldyB3ZWJwYWNrLkRlZmluZVBsdWdpbih7XG4gICAgICAgICdwcm9jZXNzLmVudi5OT0RFX0VOVic6IEpTT04uc3RyaW5naWZ5KE5PREVfRU5WKVxuICAgIH0pLFxuXG4gICAgbmV3IENvcHlXZWJwYWNrUGx1Z2luKFt7XG4gICAgICAgIGZyb206IHBhdGhzLnNyY01hbmlmZXN0LFxuXG4gICAgICAgIC8vID8gR2VuZXJhdGVzIG91ciBtYW5pZmVzdCBmaWxlIHVzaW5nIGluZm8gZnJvbSBwYWNrYWdlLmpzb25cbiAgICAgICAgdHJhbnNmb3JtOiBjb250ZW50ID0+IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG5hbWU6IGAke0RFVl9FTlYgPyBcIkRFVi1cIiA6ICcnfSR7cGtnLm5hbWV9YCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBwa2cuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB2ZXJzaW9uOiBwa2cudmVyc2lvbixcbiAgICAgICAgICAgICdjb250ZW50X3NlY3VyaXR5X3BvbGljeSc6IGBzY3JpcHQtc3JjICdzZWxmJyR7REVWX0VOViA/IFwiICd1bnNhZmUtZXZhbCdcIiA6ICcnfTsgb2JqZWN0LXNyYyAnc2VsZidgLFxuICAgICAgICAgICAgLi4uSlNPTi5wYXJzZShjb250ZW50LnRvU3RyaW5nKCkpXG4gICAgICAgIH0pKVxuICAgIH1dKSxcblxuICAgIG5ldyBIdG1sV2VicGFja1BsdWdpbih7XG4gICAgICAgIHRlbXBsYXRlOiBgJHtwYXRocy5zcmN9L3BvcHVwLmh0bWxgLFxuICAgICAgICBmaWxlbmFtZTogJ3BvcHVwLmh0bWwnLFxuICAgICAgICBjaHVua3M6IFsncG9wdXAnXVxuICAgIH0pLFxuXG4gICAgbmV3IEh0bWxXZWJwYWNrUGx1Z2luKHtcbiAgICAgICAgdGVtcGxhdGU6IGAke3BhdGhzLnNyY30vb3B0aW9ucy5odG1sYCxcbiAgICAgICAgZmlsZW5hbWU6ICdvcHRpb25zLmh0bWwnLFxuICAgICAgICBjaHVua3M6IFsnb3B0aW9ucyddXG4gICAgfSksXG5cbiAgICBuZXcgSHRtbFdlYnBhY2tQbHVnaW4oe1xuICAgICAgICB0ZW1wbGF0ZTogYCR7cGF0aHMuc3JjfS9iYWNrZ3JvdW5kLmh0bWxgLFxuICAgICAgICBmaWxlbmFtZTogJ2JhY2tncm91bmQuaHRtbCcsXG4gICAgICAgIGNodW5rczogWydiYWNrZ3JvdW5kJ11cbiAgICB9KSxcblxuICAgIG5ldyBXcml0ZUZpbGVXZWJwYWNrUGx1Z2luKClcbl07XG5cbmlmKE5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKVxuICAgIG9wdGlvbnMuZGV2dG9vbCA9ICdjaGVhcC1tb2R1bGUtZXZhbC1zb3VyY2UtbWFwJztcblxubW9kdWxlLmV4cG9ydHMgPSBvcHRpb25zO1xuIl19