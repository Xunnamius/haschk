/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

require("source-map-support/register");

var _package = _interopRequireDefault(require("./package"));

var _webpack = _interopRequireDefault(require("webpack"));

var _cleanWebpackPlugin = require("clean-webpack-plugin");

var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _writeFileWebpackPlugin = _interopRequireDefault(require("write-file-webpack-plugin"));

var _parseGitignore = _interopRequireDefault(require("parse-gitignore"));

var _fs = require("fs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();

const {
  HASHING_OUTPUT_LENGTH
} = process.env;
const paths = {};
paths.src = `${__dirname}/src`;
paths.build = `${__dirname}/build`;
paths.buildAssets = `${paths.build}/assets`;
paths.buildGitIgnore = `${paths.build}/.gitignore`;
paths.srcManifest = `${paths.src}/manifest.json`;
paths.components = `${paths.src}/components`;
paths.assets = `${paths.src}/assets`;
const assetExtensions = ['jpg', 'jpeg', 'png', `gif`, "eot", 'otf', 'svg', 'ttf', 'woff', 'woff2'];

const configure = NODE_ENV => {
  const DEV_ENV = NODE_ENV === 'development';
  const options = {};
  options.mode = DEV_ENV ? 'development' : 'production';
  options.entry = {
    background: [`${paths.components}/background/index.js`],
    options: [`${paths.components}/options/index.js`],
    popup: [`${paths.components}/popup/index.js`]
  };
  options.output = {
    path: paths.build,
    filename: '[name].packed.js'
  };
  options.module = {
    rules: [{
      test: /\.css$/,
      loader: 'style-loader!css-loader',
      exclude: /node_modules/
    }, {
      test: new RegExp(`\\.(${assetExtensions.join('|')})$`),
      loader: 'file-loader?name=[name].[ext]',
      exclude: /node_modules/
    }, {
      test: /\.html$/,
      loader: 'html-loader',
      exclude: /node_modules/
    }, {
      test: /\.js$/,
      loader: 'babel-loader?cacheDirectory',
      exclude: /node_modules/
    }]
  };
  options.plugins = [new _webpack.default.DefinePlugin({
    'process.env': {
      NODE_ENV: JSON.stringify(NODE_ENV),
      HASHING_OUTPUT_LENGTH: JSON.stringify(HASHING_OUTPUT_LENGTH)
    }
  }), new _copyWebpackPlugin.default([{
    from: paths.srcManifest,
    transform: content => Buffer.from(JSON.stringify({
      name: `${DEV_ENV ? "DEV-" : ''}${_package.default.name}`,
      description: _package.default.description,
      version: _package.default.version,
      'content_security_policy': `script-src 'self'${DEV_ENV ? " 'unsafe-eval'" : ''}; object-src 'self'`,
      ...JSON.parse(content.toString())
    }))
  }]), new _copyWebpackPlugin.default([{
    from: `${paths.assets}/icon/**/*.png`,
    to: `${paths.buildAssets}/icon/[1]`,
    test: /.*\/icon\/(.*)$/
  }]), new _htmlWebpackPlugin.default({
    template: `${paths.src}/popup.html`,
    filename: 'popup.html',
    chunks: ['popup']
  }), new _htmlWebpackPlugin.default({
    template: `${paths.src}/options.html`,
    filename: 'options.html',
    chunks: ['options']
  }), new _htmlWebpackPlugin.default({
    template: `${paths.src}/background.html`,
    filename: 'background.html',
    chunks: ['background']
  }), new _htmlWebpackPlugin.default({
    template: `${paths.src}/welcome.html`,
    filename: 'welcome.html'
  }), new _writeFileWebpackPlugin.default()];
  options.resolve = {};
  options.resolve.alias = {
    'universe': `${__dirname}/src/universe/`,
    'components': `${__dirname}/src/components/`
  };
  if (DEV_ENV) options.devtool = 'cheap-module-eval-source-map';

  if (NODE_ENV !== 'generator') {
    options.resolve.mainFields = ['browser', 'main'];
  }

  const exclude = (0, _parseGitignore.default)((0, _fs.readFileSync)(paths.buildGitIgnore)).filter(path => path.startsWith('!'));
  console.log(exclude);
  options.plugins = [new _cleanWebpackPlugin.CleanWebpackPlugin({
    cleanOnceBeforeBuildPatterns: [paths.build, ...exclude]
  }), ...options.plugins];
  return options;
};

module.exports = env => configure(env.NODE_ENV);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy93ZWJwYWNrLmNvbmZpZy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwiSEFTSElOR19PVVRQVVRfTEVOR1RIIiwicHJvY2VzcyIsImVudiIsInBhdGhzIiwic3JjIiwiX19kaXJuYW1lIiwiYnVpbGQiLCJidWlsZEFzc2V0cyIsImJ1aWxkR2l0SWdub3JlIiwic3JjTWFuaWZlc3QiLCJjb21wb25lbnRzIiwiYXNzZXRzIiwiYXNzZXRFeHRlbnNpb25zIiwiY29uZmlndXJlIiwiTk9ERV9FTlYiLCJERVZfRU5WIiwib3B0aW9ucyIsIm1vZGUiLCJlbnRyeSIsImJhY2tncm91bmQiLCJwb3B1cCIsIm91dHB1dCIsInBhdGgiLCJmaWxlbmFtZSIsIm1vZHVsZSIsInJ1bGVzIiwidGVzdCIsImxvYWRlciIsImV4Y2x1ZGUiLCJSZWdFeHAiLCJqb2luIiwicGx1Z2lucyIsIndlYnBhY2siLCJEZWZpbmVQbHVnaW4iLCJKU09OIiwic3RyaW5naWZ5IiwiQ29weVdlYnBhY2tQbHVnaW4iLCJmcm9tIiwidHJhbnNmb3JtIiwiY29udGVudCIsIkJ1ZmZlciIsIm5hbWUiLCJwa2ciLCJkZXNjcmlwdGlvbiIsInZlcnNpb24iLCJwYXJzZSIsInRvU3RyaW5nIiwidG8iLCJIdG1sV2VicGFja1BsdWdpbiIsInRlbXBsYXRlIiwiY2h1bmtzIiwiV3JpdGVGaWxlV2VicGFja1BsdWdpbiIsInJlc29sdmUiLCJhbGlhcyIsImRldnRvb2wiLCJtYWluRmllbGRzIiwiZmlsdGVyIiwic3RhcnRzV2l0aCIsImNvbnNvbGUiLCJsb2ciLCJDbGVhbldlYnBhY2tQbHVnaW4iLCJjbGVhbk9uY2VCZWZvcmVCdWlsZFBhdHRlcm5zIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUFBLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JDLE1BQWxCOztBQUVBLE1BQU07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RUFBRSxDQUFFMUQsS0FBSyxDQUFDRyxLQUFSLEVBQWUsR0FBR3NCLE9BQWxCO0FBQWhDLEdBQXZCLENBRGMsRUFFZCxHQUFHWixPQUFPLENBQUNlLE9BRkcsQ0FBbEI7QUFLQSxTQUFPZixPQUFQO0FBQ0gsQ0FqSUQ7O0FBbUlBUSxNQUFNLENBQUNzQyxPQUFQLEdBQWtCNUQsR0FBRCxJQUFnQ1csU0FBUyxDQUFDWCxHQUFHLENBQUNZLFFBQUwsQ0FBMUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG4vLyBmbG93LWRpc2FibGUtbGluZVxuaW1wb3J0IHBrZyBmcm9tICcuL3BhY2thZ2UnXG5pbXBvcnQgd2VicGFjayBmcm9tICd3ZWJwYWNrJ1xuaW1wb3J0IHsgQ2xlYW5XZWJwYWNrUGx1Z2luIH0gZnJvbSAnY2xlYW4td2VicGFjay1wbHVnaW4nXG5pbXBvcnQgQ29weVdlYnBhY2tQbHVnaW4gZnJvbSAnY29weS13ZWJwYWNrLXBsdWdpbidcbmltcG9ydCBIdG1sV2VicGFja1BsdWdpbiBmcm9tICdodG1sLXdlYnBhY2stcGx1Z2luJ1xuaW1wb3J0IFdyaXRlRmlsZVdlYnBhY2tQbHVnaW4gZnJvbSAnd3JpdGUtZmlsZS13ZWJwYWNrLXBsdWdpbidcbmltcG9ydCBwYXJzZUdpdElnbm9yZSBmcm9tICdwYXJzZS1naXRpZ25vcmUnXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tICdmcydcblxucmVxdWlyZSgnZG90ZW52JykuY29uZmlnKCk7XG5cbmNvbnN0IHsgSEFTSElOR19PVVRQVVRfTEVOR1RIIH0gPSBwcm9jZXNzLmVudjtcblxuY29uc3QgcGF0aHMgPSB7fTtcblxucGF0aHMuc3JjID0gYCR7X19kaXJuYW1lfS9zcmNgO1xucGF0aHMuYnVpbGQgPSBgJHtfX2Rpcm5hbWV9L2J1aWxkYDtcbnBhdGhzLmJ1aWxkQXNzZXRzID0gYCR7cGF0aHMuYnVpbGR9L2Fzc2V0c2A7XG5wYXRocy5idWlsZEdpdElnbm9yZSA9IGAke3BhdGhzLmJ1aWxkfS8uZ2l0aWdub3JlYDtcbnBhdGhzLnNyY01hbmlmZXN0ID0gYCR7cGF0aHMuc3JjfS9tYW5pZmVzdC5qc29uYDtcbnBhdGhzLmNvbXBvbmVudHMgPSBgJHtwYXRocy5zcmN9L2NvbXBvbmVudHNgO1xucGF0aHMuYXNzZXRzID0gYCR7cGF0aHMuc3JjfS9hc3NldHNgO1xuY29uc3QgYXNzZXRFeHRlbnNpb25zID0gWydqcGcnLCAnanBlZycsICdwbmcnLCBgZ2lmYCwgXCJlb3RcIiwgJ290ZicsICdzdmcnLCAndHRmJywgJ3dvZmYnLCAnd29mZjInXTtcblxuY29uc3QgY29uZmlndXJlID0gKE5PREVfRU5WOiA/c3RyaW5nKSA9PiB7XG4gICAgY29uc3QgREVWX0VOViA9IE5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7fTtcblxuICAgIG9wdGlvbnMubW9kZSA9IERFVl9FTlYgPyAnZGV2ZWxvcG1lbnQnIDogJ3Byb2R1Y3Rpb24nO1xuXG4gICAgb3B0aW9ucy5lbnRyeSA9IHtcbiAgICAgICAgYmFja2dyb3VuZDogW2Ake3BhdGhzLmNvbXBvbmVudHN9L2JhY2tncm91bmQvaW5kZXguanNgXSxcbiAgICAgICAgb3B0aW9uczogW2Ake3BhdGhzLmNvbXBvbmVudHN9L29wdGlvbnMvaW5kZXguanNgXSxcbiAgICAgICAgcG9wdXA6IFtgJHtwYXRocy5jb21wb25lbnRzfS9wb3B1cC9pbmRleC5qc2BdLFxuICAgIH07XG5cbiAgICBvcHRpb25zLm91dHB1dCA9IHtcbiAgICAgICAgcGF0aDogcGF0aHMuYnVpbGQsXG4gICAgICAgIGZpbGVuYW1lOiAnW25hbWVdLnBhY2tlZC5qcydcbiAgICB9O1xuXG4gICAgb3B0aW9ucy5tb2R1bGUgPSB7XG4gICAgICAgIHJ1bGVzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGVzdDogL1xcLmNzcyQvLFxuICAgICAgICAgICAgICAgIGxvYWRlcjogJ3N0eWxlLWxvYWRlciFjc3MtbG9hZGVyJyxcbiAgICAgICAgICAgICAgICBleGNsdWRlOiAvbm9kZV9tb2R1bGVzL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXN0OiBuZXcgUmVnRXhwKGBcXFxcLigke2Fzc2V0RXh0ZW5zaW9ucy5qb2luKCd8Jyl9KSRgKSxcbiAgICAgICAgICAgICAgICBsb2FkZXI6ICdmaWxlLWxvYWRlcj9uYW1lPVtuYW1lXS5bZXh0XScsXG4gICAgICAgICAgICAgICAgZXhjbHVkZTogL25vZGVfbW9kdWxlcy9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGVzdDogL1xcLmh0bWwkLyxcbiAgICAgICAgICAgICAgICBsb2FkZXI6ICdodG1sLWxvYWRlcicsXG4gICAgICAgICAgICAgICAgZXhjbHVkZTogL25vZGVfbW9kdWxlcy9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGVzdDogL1xcLmpzJC8sXG4gICAgICAgICAgICAgICAgbG9hZGVyOiAnYmFiZWwtbG9hZGVyP2NhY2hlRGlyZWN0b3J5JyxcbiAgICAgICAgICAgICAgICBleGNsdWRlOiAvbm9kZV9tb2R1bGVzL1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfTtcblxuICAgIG9wdGlvbnMucGx1Z2lucyA9IFtcbiAgICAgICAgLy8gPyBDbGVhbiBwYXRocy5idWlsZCAoYWRkZWQgYmVsb3cgaW5zdGVhZClcbiAgICAgICAgLy8gbmV3IENsZWFuV2VicGFja1BsdWdpbihbJ2J1aWxkJ10pLFxuXG4gICAgICAgIC8vID8gRXhwb3NlIGRlc2lyZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGluIHRoZSBwYWNrZWQgYnVuZGxlXG4gICAgICAgIG5ldyB3ZWJwYWNrLkRlZmluZVBsdWdpbih7XG4gICAgICAgICAgICAncHJvY2Vzcy5lbnYnOiB7XG4gICAgICAgICAgICAgICAgTk9ERV9FTlY6IEpTT04uc3RyaW5naWZ5KE5PREVfRU5WKSxcbiAgICAgICAgICAgICAgICBIQVNISU5HX09VVFBVVF9MRU5HVEg6IEpTT04uc3RyaW5naWZ5KEhBU0hJTkdfT1VUUFVUX0xFTkdUSCksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcblxuICAgICAgICBuZXcgQ29weVdlYnBhY2tQbHVnaW4oW3tcbiAgICAgICAgICAgIGZyb206IHBhdGhzLnNyY01hbmlmZXN0LFxuXG4gICAgICAgICAgICAvLyA/IEdlbmVyYXRlcyBvdXIgbWFuaWZlc3QgZmlsZSB1c2luZyBpbmZvIGZyb20gcGFja2FnZS5qc29uXG4gICAgICAgICAgICB0cmFuc2Zvcm06IGNvbnRlbnQgPT4gQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIG5hbWU6IGAke0RFVl9FTlYgPyBcIkRFVi1cIiA6ICcnfSR7cGtnLm5hbWV9YCxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogcGtnLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIHZlcnNpb246IHBrZy52ZXJzaW9uLFxuICAgICAgICAgICAgICAgICdjb250ZW50X3NlY3VyaXR5X3BvbGljeSc6IGBzY3JpcHQtc3JjICdzZWxmJyR7REVWX0VOViA/IFwiICd1bnNhZmUtZXZhbCdcIiA6ICcnfTsgb2JqZWN0LXNyYyAnc2VsZidgLFxuICAgICAgICAgICAgICAgIC4uLkpTT04ucGFyc2UoY29udGVudC50b1N0cmluZygpKVxuICAgICAgICAgICAgfSkpXG4gICAgICAgIH1dKSxcblxuICAgICAgICBuZXcgQ29weVdlYnBhY2tQbHVnaW4oW3tcbiAgICAgICAgICAgIGZyb206IGAke3BhdGhzLmFzc2V0c30vaWNvbi8qKi8qLnBuZ2AsXG4gICAgICAgICAgICB0bzogYCR7cGF0aHMuYnVpbGRBc3NldHN9L2ljb24vWzFdYCxcbiAgICAgICAgICAgIHRlc3Q6IC8uKlxcL2ljb25cXC8oLiopJC9cbiAgICAgICAgfV0pLFxuXG4gICAgICAgIG5ldyBIdG1sV2VicGFja1BsdWdpbih7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogYCR7cGF0aHMuc3JjfS9wb3B1cC5odG1sYCxcbiAgICAgICAgICAgIGZpbGVuYW1lOiAncG9wdXAuaHRtbCcsXG4gICAgICAgICAgICBjaHVua3M6IFsncG9wdXAnXVxuICAgICAgICB9KSxcblxuICAgICAgICBuZXcgSHRtbFdlYnBhY2tQbHVnaW4oe1xuICAgICAgICAgICAgdGVtcGxhdGU6IGAke3BhdGhzLnNyY30vb3B0aW9ucy5odG1sYCxcbiAgICAgICAgICAgIGZpbGVuYW1lOiAnb3B0aW9ucy5odG1sJyxcbiAgICAgICAgICAgIGNodW5rczogWydvcHRpb25zJ11cbiAgICAgICAgfSksXG5cbiAgICAgICAgbmV3IEh0bWxXZWJwYWNrUGx1Z2luKHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiBgJHtwYXRocy5zcmN9L2JhY2tncm91bmQuaHRtbGAsXG4gICAgICAgICAgICBmaWxlbmFtZTogJ2JhY2tncm91bmQuaHRtbCcsXG4gICAgICAgICAgICBjaHVua3M6IFsnYmFja2dyb3VuZCddXG4gICAgICAgIH0pLFxuXG4gICAgICAgIG5ldyBIdG1sV2VicGFja1BsdWdpbih7XG4gICAgICAgICAgICB0ZW1wbGF0ZTogYCR7cGF0aHMuc3JjfS93ZWxjb21lLmh0bWxgLFxuICAgICAgICAgICAgZmlsZW5hbWU6ICd3ZWxjb21lLmh0bWwnXG4gICAgICAgIH0pLFxuXG4gICAgICAgIG5ldyBXcml0ZUZpbGVXZWJwYWNrUGx1Z2luKClcbiAgICBdO1xuXG4gICAgb3B0aW9ucy5yZXNvbHZlID0ge307XG5cbiAgICAvLyA/IFRoZXNlIGFyZSBhbGlhc2VzIHRoYXQgY2FuIGJlIHVzZWQgZHVyaW5nIEpTIGltcG9ydCBjYWxsc1xuICAgIC8vICEgTm90ZSB0aGF0IHlvdSBtdXN0IGFsc28gY2hhbmdlIHRoZXNlIHNhbWUgYWxpYXNlcyBpbiAuZmxvd2NvbmZpZ1xuICAgIC8vICEgTm90ZSB0aGF0IHlvdSBtdXN0IGFsc28gY2hhbmdlIHRoZXNlIHNhbWUgYWxpYXNlcyBpbiBwYWNrYWdlLmpzb24gKGplc3QpXG4gICAgb3B0aW9ucy5yZXNvbHZlLmFsaWFzID0ge1xuICAgICAgICAndW5pdmVyc2UnOiBgJHtfX2Rpcm5hbWV9L3NyYy91bml2ZXJzZS9gLFxuICAgICAgICAnY29tcG9uZW50cyc6IGAke19fZGlybmFtZX0vc3JjL2NvbXBvbmVudHMvYCxcbiAgICB9O1xuXG4gICAgLy8gPyBTZWU6IGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uZmlndXJhdGlvbi9kZXZ0b29sXG4gICAgaWYoREVWX0VOVilcbiAgICAgICAgb3B0aW9ucy5kZXZ0b29sID0gJ2NoZWFwLW1vZHVsZS1ldmFsLXNvdXJjZS1tYXAnO1xuXG4gICAgaWYoTk9ERV9FTlYgIT09ICdnZW5lcmF0b3InKVxuICAgIHtcbiAgICAgICAgLy8gPyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9pcGZzL2pzLWlwZnMtYXBpL3B1bGwvNzc3XG4gICAgICAgIG9wdGlvbnMucmVzb2x2ZS5tYWluRmllbGRzID0gWydicm93c2VyJywgJ21haW4nXTtcbiAgICB9XG5cbiAgICBjb25zdCBleGNsdWRlID0gcGFyc2VHaXRJZ25vcmUocmVhZEZpbGVTeW5jKHBhdGhzLmJ1aWxkR2l0SWdub3JlKSkuZmlsdGVyKHBhdGggPT4gcGF0aC5zdGFydHNXaXRoKCchJykpO1xuICAgIGNvbnNvbGUubG9nKGV4Y2x1ZGUpO1xuXG4gICAgLy8gPyBUaGUgZm9sbG93aW5nIGlzIG5lY2Vzc2FyeSBzbyBDbGVhbldlYnBhY2tQbHVnaW4gZG9lc24ndCBraWxsIGJ1aWxkLy5naXRpZ25vcmVcbiAgICBvcHRpb25zLnBsdWdpbnMgPSBbXG4gICAgICAgIG5ldyBDbGVhbldlYnBhY2tQbHVnaW4oeyBjbGVhbk9uY2VCZWZvcmVCdWlsZFBhdHRlcm5zOiBbIHBhdGhzLmJ1aWxkLCAuLi5leGNsdWRlIF19KSxcbiAgICAgICAgLi4ub3B0aW9ucy5wbHVnaW5zXG4gICAgXTtcblxuICAgIHJldHVybiBvcHRpb25zO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZW52OiB7IE5PREVfRU5WOiA/c3RyaW5nIH0pID0+IGNvbmZpZ3VyZShlbnYuTk9ERV9FTlYpO1xuIl19