/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wpdevserv = exports.bundleZip = exports.build = exports.regenerate = exports.cleanBuild = exports.cleanTypes = void 0;

require("source-map-support/register");

var _fs = require("fs");

var _util = require("util");

var _gulp = _interopRequireDefault(require("gulp"));

var _gulpTap = _interopRequireDefault(require("gulp-tap"));

var _gulpZip = _interopRequireDefault(require("gulp-zip"));

var _del = _interopRequireDefault(require("del"));

var _fancyLog = _interopRequireDefault(require("fancy-log"));

var _parseGitignore = _interopRequireDefault(require("parse-gitignore"));

var _core = require("@babel/core");

var _path = require("path");

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackDevServer = _interopRequireDefault(require("webpack-dev-server"));

var _webpack2 = _interopRequireDefault(require("./webpack.config"));

var _package = _interopRequireDefault(require("./package"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();

const {
  WEBPACK_PORT,
  DEV_ENDPOINT,
  HASHING_OUTPUT_LENGTH
} = process.env;
const configured = (0, _webpack2.default)({
  NODE_ENV: process.env.NODE_ENV
});
if (typeof WEBPACK_PORT !== 'string') throw new TypeError('WEBPACK_PORT is improperly defined. Did you copy dist.env -> .env ?');
if (typeof DEV_ENDPOINT !== 'string') throw new TypeError('DEV_ENDPOINT is improperly defined. Did you copy dist.env -> .env ?');
if (typeof HASHING_OUTPUT_LENGTH !== 'string') throw new TypeError('HASHING_OUTPUT_LENGTH is improperly defined. Did you copy dist.env -> .env ?');
const DEV_PORT = parseInt(WEBPACK_PORT, 10);
const paths = {};
paths.flowTyped = 'flow-typed';
paths.flowTypedGitIgnore = `${paths.flowTyped}/.gitignore`;
paths.build = `build`;
paths.buildGitIgnore = `${paths.build}/.gitignore`;
paths.configs = 'config';
paths.packageJson = 'package.json';
paths.launchJson = '.vscode/launch.json';
paths.launchJsonDist = '.vscode/launch.dist.json';
paths.env = '.env';
paths.envDist = 'dist.env';
paths.gitProjectDir = '.git';
paths.gitIgnore = '.gitignore';
paths.packageLockJson = 'package-lock.json';
paths.regenTargets = [`${paths.configs}/*.js`];
const CLI_BANNER = `/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/\n\n`;
const readFileAsync = (0, _util.promisify)(_fs.readFile);

const cleanTypes = async () => {
  const targets = (0, _parseGitignore.default)((await readFileAsync(paths.flowTypedGitIgnore)));
  (0, _fancyLog.default)(`Deletion targets @ ${paths.flowTyped}/: "${targets.join('" "')}"`);
  await (0, _del.default)(targets, {
    cwd: paths.flowTyped
  });
};

exports.cleanTypes = cleanTypes;
cleanTypes.description = `Resets the ${paths.flowTyped} directory to a pristine state`;

const cleanBuild = async () => {
  const targets = (0, _parseGitignore.default)((await readFileAsync(paths.buildGitIgnore)));
  (0, _fancyLog.default)(`Deletion targets @ ${paths.build}/: "${targets.join('" "')}"`);
  await (0, _del.default)(targets, {
    cwd: paths.build
  });
};

exports.cleanBuild = cleanBuild;
cleanBuild.description = `Resets the ${paths.build} directory to a pristine state`;

const regenerate = () => {
  (0, _fancyLog.default)(`Regenerating targets: "${paths.regenTargets.join('" "')}"`);
  process.env.BABEL_ENV = 'generator';
  return _gulp.default.src(paths.regenTargets).pipe((0, _gulpTap.default)(file => file.contents = Buffer.from(CLI_BANNER + (0, _core.transformSync)(file.contents.toString(), {
    sourceFileName: (0, _path.relative)(__dirname, file.path)
  }).code))).pipe(_gulp.default.dest('.'));
};

exports.regenerate = regenerate;
regenerate.description = 'Invokes babel on the files in config, transpiling them into their project root versions';

const build = () => {
  process.env.NODE_ENV = 'production';
  return new Promise(resolve => {
    (0, _webpack.default)(configured, (err, stats) => {
      if (err) {
        const details = err.details ? `\n\t${err.details}` : '';
        throw `WEBPACK FATAL BUILD ERROR: ${err}${details}`;
      }

      const info = stats.toJson();
      if (stats.hasErrors()) throw `WEBPACK COMPILATION ERROR: ${info.errors}`;
      if (stats.hasWarnings()) console.warn(`WEBPACK COMPILATION WARNING: ${info.warnings}`);
      resolve();
    });
  });
};

exports.build = build;
build.description = 'Yields a production-ready unpacked extension via the build directory';

const bundleZip = async () => {
  await (0, _del.default)([`${_package.default.name}-*.zip`]).then(() => {
    _gulp.default.src('build/**/*').pipe((0, _gulpZip.default)(`${_package.default.name}-${_package.default.version}.zip`)).pipe(_gulp.default.dest('.'));
  });
};

exports.bundleZip = bundleZip;
bundleZip.description = 'Bundles the build directory into a zip archive for upload to the Chrome Web Store and elsewhere';

const wpdevserv = () => {
  var _configured$plugins;

  Object.keys(configured.entry).forEach(entryKey => configured.entry[entryKey] = [`webpack-dev-server/client?http://${DEV_ENDPOINT}:${DEV_PORT}`, 'webpack/hot/dev-server', configured.entry[entryKey]]);
  configured.plugins = [new _webpack.default.HotModuleReplacementPlugin(), ...((_configured$plugins = configured.plugins) !== null && _configured$plugins !== void 0 ? _configured$plugins : [])];
  const packer = (0, _webpack.default)(configured);
  const server = new _webpackDevServer.default(packer, {
    hot: true,
    contentBase: paths.build,
    headers: {
      'Access-Control-Allow-Origin': '*'
    }
  });
  server.listen(DEV_PORT, err => {
    if (err) throw `WEBPACK DEV SERVER ERROR: ${err}`;
  });
};

exports.wpdevserv = wpdevserv;
wpdevserv.description = 'Launches the Webpack Development Server for testing purposes';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9ndWxwZmlsZS5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwiV0VCUEFDS19QT1JUIiwiREVWX0VORFBPSU5UIiwiSEFTSElOR19PVVRQVVRfTEVOR1RIIiwicHJvY2VzcyIsImVudiIsImNvbmZpZ3VyZWQiLCJOT0RFX0VOViIsIlR5cGVFcnJvciIsIkRFVl9QT1JUIiwicGFyc2VJbnQiLCJwYXRocyIsImZsb3dUeXBlZCIsImZsb3dUeXBlZEdpdElnbm9yZSIsImJ1aWxkIiwiYnVpbGRHaXRJZ25vcmUiLCJjb25maWdzIiwicGFja2FnZUpzb24iLCJsYXVuY2hKc29uIiwibGF1bmNoSnNvbkRpc3QiLCJlbnZEaXN0IiwiZ2l0UHJvamVjdERpciIsImdpdElnbm9yZSIsInBhY2thZ2VMb2NrSnNvbiIsInJlZ2VuVGFyZ2V0cyIsIkNMSV9CQU5ORVIiLCJyZWFkRmlsZUFzeW5jIiwicmVhZEZpbGUiLCJjbGVhblR5cGVzIiwidGFyZ2V0cyIsImpvaW4iLCJjd2QiLCJkZXNjcmlwdGlvbiIsImNsZWFuQnVpbGQiLCJyZWdlbmVyYXRlIiwiQkFCRUxfRU5WIiwiZ3VscCIsInNyYyIsInBpcGUiLCJmaWxlIiwiY29udGVudHMiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJzb3VyY2VGaWxlTmFtZSIsIl9fZGlybmFtZSIsInBhdGgiLCJjb2RlIiwiZGVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwiZXJyIiwic3RhdHMiLCJkZXRhaWxzIiwiaW5mbyIsInRvSnNvbiIsImhhc0Vycm9ycyIsImVycm9ycyIsImhhc1dhcm5pbmdzIiwiY29uc29sZSIsIndhcm4iLCJ3YXJuaW5ncyIsImJ1bmRsZVppcCIsInBrZyIsIm5hbWUiLCJ0aGVuIiwidmVyc2lvbiIsIndwZGV2c2VydiIsIk9iamVjdCIsImtleXMiLCJlbnRyeSIsImZvckVhY2giLCJlbnRyeUtleSIsInBsdWdpbnMiLCJ3ZWJwYWNrIiwiSG90TW9kdWxlUmVwbGFjZW1lbnRQbHVnaW4iLCJwYWNrZXIiLCJzZXJ2ZXIiLCJ3ZWJwYWNrRGV2U2VydmVyIiwiaG90IiwiY29udGVudEJhc2UiLCJoZWFkZXJzIiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFRQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBQSxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCQyxNQUFsQjs7QUFFQSxNQUFNO0FBQ0ZDLEVBQUFBLFlBREU7QUFFRkMsRUFBQUEsWUFGRTtBQUdGQyxFQUFBQTtBQUhFLElBSUZDLE9BQU8sQ0FBQ0MsR0FKWjtBQU1BLE1BQU1DLFVBQVUsR0FBRyx1QkFBTztBQUFFQyxFQUFBQSxRQUFRLEVBQUVILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRTtBQUF4QixDQUFQLENBQW5CO0FBRUEsSUFBRyxPQUFPTixZQUFQLEtBQXdCLFFBQTNCLEVBQ0ksTUFBTSxJQUFJTyxTQUFKLENBQWMscUVBQWQsQ0FBTjtBQUVKLElBQUcsT0FBT04sWUFBUCxLQUF3QixRQUEzQixFQUNJLE1BQU0sSUFBSU0sU0FBSixDQUFjLHFFQUFkLENBQU47QUFFSixJQUFHLE9BQU9MLHFCQUFQLEtBQWlDLFFBQXBDLEVBQ0ksTUFBTSxJQUFJSyxTQUFKLENBQWMsOEVBQWQsQ0FBTjtBQUVKLE1BQU1DLFFBQVEsR0FBR0MsUUFBUSxDQUFDVCxZQUFELEVBQWUsRUFBZixDQUF6QjtBQUVBLE1BQU1VLEtBQUssR0FBRyxFQUFkO0FBRUFBLEtBQUssQ0FBQ0MsU0FBTixHQUFrQixZQUFsQjtBQUNBRCxLQUFLLENBQUNFLGtCQUFOLEdBQTRCLEdBQUVGLEtBQUssQ0FBQ0MsU0FBVSxhQUE5QztBQUNBRCxLQUFLLENBQUNHLEtBQU4sR0FBZSxPQUFmO0FBQ0FILEtBQUssQ0FBQ0ksY0FBTixHQUF3QixHQUFFSixLQUFLLENBQUNHLEtBQU0sYUFBdEM7QUFDQUgsS0FBSyxDQUFDSyxPQUFOLEdBQWdC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RSxvQ0FBbUN0RSxZQUFhLElBQUdPLFFBQVMsRUFEYyxFQUUzRSx3QkFGMkUsRUFHM0VILFVBQVUsQ0FBQ2dFLEtBQVgsQ0FBaUJFLFFBQWpCLENBSDJFLENBQS9FO0FBTUFsRSxFQUFBQSxVQUFVLENBQUNtRSxPQUFYLEdBQXFCLENBQ2pCLElBQUlDLGlCQUFRQywwQkFBWixFQURpQixFQUVqQiwyQkFBSXJFLFVBQVUsQ0FBQ21FLE9BQWYscUVBQTBCLEVBQTFCLENBRmlCLENBQXJCO0FBS0EsUUFBTUcsTUFBTSxHQUFHLHNCQUFRdEUsVUFBUixDQUFmO0FBQ0EsUUFBTXVFLE1BQU0sR0FBRyxJQUFJQyx5QkFBSixDQUFxQkYsTUFBckIsRUFBNkI7QUFDeENHLElBQUFBLEdBQUcsRUFBRSxJQURtQztBQUV4Q0MsSUFBQUEsV0FBVyxFQUFFckUsS0FBSyxDQUFDRyxLQUZxQjtBQUd4Q21FLElBQUFBLE9BQU8sRUFBRTtBQUFFLHFDQUErQjtBQUFqQztBQUgrQixHQUE3QixDQUFmO0FBTUFKLEVBQUFBLE1BQU0sQ0FBQ0ssTUFBUCxDQUFjekUsUUFBZCxFQUF3QjBDLEdBQUcsSUFBSTtBQUFFLFFBQUdBLEdBQUgsRUFBUSxNQUFPLDZCQUE0QkEsR0FBSSxFQUF2QztBQUEwQyxHQUFuRjtBQUNILENBcEJNOzs7QUFzQlBnQixTQUFTLENBQUNuQyxXQUFWLEdBQXdCLDhEQUF4QiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbi8vID8gVG8gcmVnZW5lcmF0ZSB0aGlzIGZpbGUgKGkuZS4gaWYgeW91IGNoYW5nZWQgaXQgYW5kIHdhbnQgeW91ciBjaGFuZ2VzIHRvXG4vLyA/IGJlIHZpc2libGUpLCBjYWxsIGBucG0gcnVuIHJlZ2VuZXJhdGVgIGFmdGVyd2FyZHNcblxuLy8gVE9ETzogbWFrZSBhIGZvcmsgb2YgbnBtLWJ1bXAgdGhhdCBkb2Vzbid0IHN1Y2sgYW5kIHRoZW4gdXNlIGl0IGluIGxpZXUgb2Zcbi8vIFRPRE86IGl0cyBwcmVkZWNlc3NvciBiZWxvdy5cblxuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tICdmcydcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gJ3V0aWwnXG5pbXBvcnQgZ3VscCBmcm9tICdndWxwJ1xuaW1wb3J0IHRhcCBmcm9tICdndWxwLXRhcCdcbmltcG9ydCB6aXAgZnJvbSAnZ3VscC16aXAnXG5pbXBvcnQgZGVsIGZyb20gJ2RlbCdcbmltcG9ydCBsb2cgZnJvbSAnZmFuY3ktbG9nJ1xuaW1wb3J0IHBhcnNlR2l0SWdub3JlIGZyb20gJ3BhcnNlLWdpdGlnbm9yZSdcbmltcG9ydCB7IHRyYW5zZm9ybVN5bmMgYXMgYmFiZWwgfSBmcm9tICdAYmFiZWwvY29yZSdcbmltcG9ydCB7IHJlbGF0aXZlIGFzIHJlbFBhdGggfSBmcm9tICdwYXRoJ1xuaW1wb3J0IHdlYnBhY2sgZnJvbSAnd2VicGFjaydcbmltcG9ydCB3ZWJwYWNrRGV2U2VydmVyIGZyb20gJ3dlYnBhY2stZGV2LXNlcnZlcidcbmltcG9ydCBjb25maWcgZnJvbSAnLi93ZWJwYWNrLmNvbmZpZydcbmltcG9ydCBwa2cgZnJvbSAnLi9wYWNrYWdlJ1xuXG5yZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcblxuY29uc3Qge1xuICAgIFdFQlBBQ0tfUE9SVCxcbiAgICBERVZfRU5EUE9JTlQsXG4gICAgSEFTSElOR19PVVRQVVRfTEVOR1RIXG59ID0gcHJvY2Vzcy5lbnY7XG5cbmNvbnN0IGNvbmZpZ3VyZWQgPSBjb25maWcoeyBOT0RFX0VOVjogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfSk7XG5cbmlmKHR5cGVvZiBXRUJQQUNLX1BPUlQgIT09ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1dFQlBBQ0tfUE9SVCBpcyBpbXByb3Blcmx5IGRlZmluZWQuIERpZCB5b3UgY29weSBkaXN0LmVudiAtPiAuZW52ID8nKTtcblxuaWYodHlwZW9mIERFVl9FTkRQT0lOVCAhPT0gJ3N0cmluZycpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignREVWX0VORFBPSU5UIGlzIGltcHJvcGVybHkgZGVmaW5lZC4gRGlkIHlvdSBjb3B5IGRpc3QuZW52IC0+IC5lbnYgPycpO1xuXG5pZih0eXBlb2YgSEFTSElOR19PVVRQVVRfTEVOR1RIICE9PSAnc3RyaW5nJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdIQVNISU5HX09VVFBVVF9MRU5HVEggaXMgaW1wcm9wZXJseSBkZWZpbmVkLiBEaWQgeW91IGNvcHkgZGlzdC5lbnYgLT4gLmVudiA/Jyk7XG5cbmNvbnN0IERFVl9QT1JUID0gcGFyc2VJbnQoV0VCUEFDS19QT1JULCAxMCk7XG5cbmNvbnN0IHBhdGhzID0ge307XG5cbnBhdGhzLmZsb3dUeXBlZCA9ICdmbG93LXR5cGVkJztcbnBhdGhzLmZsb3dUeXBlZEdpdElnbm9yZSA9IGAke3BhdGhzLmZsb3dUeXBlZH0vLmdpdGlnbm9yZWA7XG5wYXRocy5idWlsZCA9IGBidWlsZGA7XG5wYXRocy5idWlsZEdpdElnbm9yZSA9IGAke3BhdGhzLmJ1aWxkfS8uZ2l0aWdub3JlYDtcbnBhdGhzLmNvbmZpZ3MgPSAnY29uZmlnJztcbnBhdGhzLnBhY2thZ2VKc29uID0gJ3BhY2thZ2UuanNvbic7XG5wYXRocy5sYXVuY2hKc29uID0gJy52c2NvZGUvbGF1bmNoLmpzb24nO1xucGF0aHMubGF1bmNoSnNvbkRpc3QgPSAnLnZzY29kZS9sYXVuY2guZGlzdC5qc29uJztcbnBhdGhzLmVudiA9ICcuZW52JztcbnBhdGhzLmVudkRpc3QgPSAnZGlzdC5lbnYnO1xucGF0aHMuZ2l0UHJvamVjdERpciA9ICcuZ2l0JztcbnBhdGhzLmdpdElnbm9yZSA9ICcuZ2l0aWdub3JlJztcbnBhdGhzLnBhY2thZ2VMb2NrSnNvbiA9ICdwYWNrYWdlLWxvY2suanNvbic7XG5cbnBhdGhzLnJlZ2VuVGFyZ2V0cyA9IFtcbiAgICBgJHtwYXRocy5jb25maWdzfS8qLmpzYFxuXTtcblxuY29uc3QgQ0xJX0JBTk5FUiA9IGAvKipcbiogISEhIERPIE5PVCBFRElUIFRISVMgRklMRSBESVJFQ1RMWSAhISFcbiogISBUaGlzIGZpbGUgaGFzIGJlZW4gZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkuIFNlZSB0aGUgY29uZmlnLyouanMgdmVyc2lvbiBvZlxuKiAhIHRoaXMgZmlsZSB0byBtYWtlIHBlcm1hbmVudCBtb2RpZmljYXRpb25zIVxuKi9cXG5cXG5gO1xuXG5jb25zdCByZWFkRmlsZUFzeW5jID0gcHJvbWlzaWZ5KHJlYWRGaWxlKTtcblxuLy8gKiBDTEVBTlRZUEVTXG5cbmV4cG9ydCBjb25zdCBjbGVhblR5cGVzID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldHMgPSBwYXJzZUdpdElnbm9yZShhd2FpdCByZWFkRmlsZUFzeW5jKHBhdGhzLmZsb3dUeXBlZEdpdElnbm9yZSkpO1xuXG4gICAgbG9nKGBEZWxldGlvbiB0YXJnZXRzIEAgJHtwYXRocy5mbG93VHlwZWR9LzogXCIke3RhcmdldHMuam9pbignXCIgXCInKX1cImApO1xuICAgIGF3YWl0IGRlbCh0YXJnZXRzLCB7IGN3ZDogcGF0aHMuZmxvd1R5cGVkIH0pO1xufTtcblxuY2xlYW5UeXBlcy5kZXNjcmlwdGlvbiA9IGBSZXNldHMgdGhlICR7cGF0aHMuZmxvd1R5cGVkfSBkaXJlY3RvcnkgdG8gYSBwcmlzdGluZSBzdGF0ZWA7XG5cbi8vICogQ0xFQU5CVUlMRFxuXG5leHBvcnQgY29uc3QgY2xlYW5CdWlsZCA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0YXJnZXRzID0gcGFyc2VHaXRJZ25vcmUoYXdhaXQgcmVhZEZpbGVBc3luYyhwYXRocy5idWlsZEdpdElnbm9yZSkpO1xuXG4gICAgbG9nKGBEZWxldGlvbiB0YXJnZXRzIEAgJHtwYXRocy5idWlsZH0vOiBcIiR7dGFyZ2V0cy5qb2luKCdcIiBcIicpfVwiYCk7XG4gICAgYXdhaXQgZGVsKHRhcmdldHMsIHsgY3dkOiBwYXRocy5idWlsZCB9KTtcbn07XG5cbmNsZWFuQnVpbGQuZGVzY3JpcHRpb24gPSBgUmVzZXRzIHRoZSAke3BhdGhzLmJ1aWxkfSBkaXJlY3RvcnkgdG8gYSBwcmlzdGluZSBzdGF0ZWA7XG5cbi8vICogUkVHRU5FUkFURVxuXG4vLyA/IElmIHlvdSBjaGFuZ2UgdGhpcyBmdW5jdGlvbiwgcnVuIGBucG0gcnVuIHJlZ2VuZXJhdGVgIHR3aWNlOiBvbmNlIHRvXG4vLyA/IGNvbXBpbGUgdGhpcyBuZXcgZnVuY3Rpb24gYW5kIG9uY2UgYWdhaW4gdG8gY29tcGlsZSBpdHNlbGYgd2l0aCB0aGUgbmV3bHlcbi8vID8gY29tcGlsZWQgbG9naWMuIElmIHRoZXJlIGlzIGFuIGVycm9yIHRoYXQgcHJldmVudHMgcmVnZW5lcmF0aW9uLCB5b3UgY2FuXG4vLyA/IHJ1biBgbnBtIHJ1biBnZW5lcmF0ZWAgdGhlbiBgbnBtIHJ1biByZWdlbmVyYXRlYCBpbnN0ZWFkLlxuZXhwb3J0IGNvbnN0IHJlZ2VuZXJhdGUgPSAoKSA9PiB7XG4gICAgbG9nKGBSZWdlbmVyYXRpbmcgdGFyZ2V0czogXCIke3BhdGhzLnJlZ2VuVGFyZ2V0cy5qb2luKCdcIiBcIicpfVwiYCk7XG5cbiAgICBwcm9jZXNzLmVudi5CQUJFTF9FTlYgPSAnZ2VuZXJhdG9yJztcblxuICAgIHJldHVybiBndWxwLnNyYyhwYXRocy5yZWdlblRhcmdldHMpXG4gICAgICAgIC5waXBlKHRhcChmaWxlID0+IGZpbGUuY29udGVudHMgPSBCdWZmZXIuZnJvbShDTElfQkFOTkVSICsgYmFiZWwoZmlsZS5jb250ZW50cy50b1N0cmluZygpLCB7XG4gICAgICAgICAgICBzb3VyY2VGaWxlTmFtZTogcmVsUGF0aChfX2Rpcm5hbWUsIGZpbGUucGF0aClcbiAgICAgICAgfSkuY29kZSkpKVxuICAgICAgICAucGlwZShndWxwLmRlc3QoJy4nKSk7XG59O1xuXG5yZWdlbmVyYXRlLmRlc2NyaXB0aW9uID0gJ0ludm9rZXMgYmFiZWwgb24gdGhlIGZpbGVzIGluIGNvbmZpZywgdHJhbnNwaWxpbmcgdGhlbSBpbnRvIHRoZWlyIHByb2plY3Qgcm9vdCB2ZXJzaW9ucyc7XG5cbi8vICogQlVJTEQgKHByb2R1Y3Rpb24pXG5cbmV4cG9ydCBjb25zdCBidWlsZCA9ICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICdwcm9kdWN0aW9uJztcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHdlYnBhY2soY29uZmlndXJlZCwgKGVyciwgc3RhdHMpID0+IHtcbiAgICAgICAgICAgIGlmKGVycilcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXRhaWxzID0gZXJyLmRldGFpbHMgPyBgXFxuXFx0JHtlcnIuZGV0YWlsc31gIDogJyc7XG4gICAgICAgICAgICAgICAgdGhyb3cgYFdFQlBBQ0sgRkFUQUwgQlVJTEQgRVJST1I6ICR7ZXJyfSR7ZGV0YWlsc31gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpbmZvID0gc3RhdHMudG9Kc29uKCk7XG5cbiAgICAgICAgICAgIGlmKHN0YXRzLmhhc0Vycm9ycygpKVxuICAgICAgICAgICAgICAgIHRocm93IGBXRUJQQUNLIENPTVBJTEFUSU9OIEVSUk9SOiAke2luZm8uZXJyb3JzfWA7XG5cbiAgICAgICAgICAgIGlmKHN0YXRzLmhhc1dhcm5pbmdzKCkpXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBXRUJQQUNLIENPTVBJTEFUSU9OIFdBUk5JTkc6ICR7aW5mby53YXJuaW5nc31gKTtcblxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cbmJ1aWxkLmRlc2NyaXB0aW9uID0gJ1lpZWxkcyBhIHByb2R1Y3Rpb24tcmVhZHkgdW5wYWNrZWQgZXh0ZW5zaW9uIHZpYSB0aGUgYnVpbGQgZGlyZWN0b3J5JztcblxuLy8gKiBCVU5ETEUtWklQXG5cbmV4cG9ydCBjb25zdCBidW5kbGVaaXAgPSBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZGVsKFtgJHtwa2cubmFtZX0tKi56aXBgXSkudGhlbigoKSA9PiB7XG4gICAgICAgIGd1bHAuc3JjKCdidWlsZC8qKi8qJykucGlwZSh6aXAoYCR7cGtnLm5hbWV9LSR7cGtnLnZlcnNpb259LnppcGApKS5waXBlKGd1bHAuZGVzdCgnLicpKTtcbiAgICB9KTtcbn07XG5cbmJ1bmRsZVppcC5kZXNjcmlwdGlvbiA9ICdCdW5kbGVzIHRoZSBidWlsZCBkaXJlY3RvcnkgaW50byBhIHppcCBhcmNoaXZlIGZvciB1cGxvYWQgdG8gdGhlIENocm9tZSBXZWIgU3RvcmUgYW5kIGVsc2V3aGVyZSc7XG5cbi8vICogV1BERVZTRVJWXG5cbmV4cG9ydCBjb25zdCB3cGRldnNlcnYgPSAoKSA9PiB7XG4gICAgT2JqZWN0LmtleXMoY29uZmlndXJlZC5lbnRyeSkuZm9yRWFjaChlbnRyeUtleSA9PiBjb25maWd1cmVkLmVudHJ5W2VudHJ5S2V5XSA9IFtcbiAgICAgICAgYHdlYnBhY2stZGV2LXNlcnZlci9jbGllbnQ/aHR0cDovLyR7REVWX0VORFBPSU5UfToke0RFVl9QT1JUfWAsXG4gICAgICAgICd3ZWJwYWNrL2hvdC9kZXYtc2VydmVyJyxcbiAgICAgICAgY29uZmlndXJlZC5lbnRyeVtlbnRyeUtleV1cbiAgICBdKTtcblxuICAgIGNvbmZpZ3VyZWQucGx1Z2lucyA9IFtcbiAgICAgICAgbmV3IHdlYnBhY2suSG90TW9kdWxlUmVwbGFjZW1lbnRQbHVnaW4oKSxcbiAgICAgICAgLi4uKGNvbmZpZ3VyZWQucGx1Z2lucyA/PyBbXSksXG4gICAgXTtcblxuICAgIGNvbnN0IHBhY2tlciA9IHdlYnBhY2soY29uZmlndXJlZCk7XG4gICAgY29uc3Qgc2VydmVyID0gbmV3IHdlYnBhY2tEZXZTZXJ2ZXIocGFja2VyLCB7XG4gICAgICAgIGhvdDogdHJ1ZSxcbiAgICAgICAgY29udGVudEJhc2U6IHBhdGhzLmJ1aWxkLFxuICAgICAgICBoZWFkZXJzOiB7ICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicgfVxuICAgIH0pO1xuXG4gICAgc2VydmVyLmxpc3RlbihERVZfUE9SVCwgZXJyID0+IHsgaWYoZXJyKSB0aHJvdyBgV0VCUEFDSyBERVYgU0VSVkVSIEVSUk9SOiAke2Vycn1gIH0pO1xufTtcblxud3BkZXZzZXJ2LmRlc2NyaXB0aW9uID0gJ0xhdW5jaGVzIHRoZSBXZWJwYWNrIERldmVsb3BtZW50IFNlcnZlciBmb3IgdGVzdGluZyBwdXJwb3Nlcyc7XG4iXX0=