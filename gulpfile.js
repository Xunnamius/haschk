/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wpdevserv = exports.bundleZip = exports.build = exports.regenerate = exports.cleanBuild = exports.cleanTypes = void 0;

require("source-map-support/register");

var _fs = require("fs");

var _util = require("util");

var _gulp = _interopRequireDefault(require("gulp"));

var _gulpTap = _interopRequireDefault(require("gulp-tap"));

var _gulpZip = _interopRequireDefault(require("gulp-zip"));

var _del = _interopRequireDefault(require("del"));

var _fancyLog = _interopRequireDefault(require("fancy-log"));

var _parseGitignore = _interopRequireDefault(require("parse-gitignore"));

var _core = require("@babel/core");

var _path = require("path");

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackDevServer = _interopRequireDefault(require("webpack-dev-server"));

var _webpack2 = _interopRequireDefault(require("./webpack.config"));

var _package = _interopRequireDefault(require("./package"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();

const {
  WEBPACK_PORT,
  DEV_ENDPOINT,
  HASHING_ALGORITHM
} = process.env;
const configured = (0, _webpack2.default)({
  NODE_ENV: process.env.NODE_ENV
});
if (typeof WEBPACK_PORT !== 'string') throw new TypeError('WEBPACK_PORT is improperly defined. Did you copy dist.env -> .env ?');
if (typeof DEV_ENDPOINT !== 'string') throw new TypeError('DEV_ENDPOINT is improperly defined. Did you copy dist.env -> .env ?');
if (typeof HASHING_ALGORITHM !== 'string') throw new TypeError('HASHING_ALGORITHM is improperly defined. Did you copy dist.env -> .env ?');
const DEV_PORT = parseInt(WEBPACK_PORT, 10);
const paths = {};
paths.flowTyped = 'flow-typed';
paths.flowTypedGitIgnore = `${paths.flowTyped}/.gitignore`;
paths.build = `build`;
paths.configs = 'config';
paths.packageJson = 'package.json';
paths.launchJson = '.vscode/launch.json';
paths.launchJsonDist = '.vscode/launch.dist.json';
paths.env = '.env';
paths.envDist = 'dist.env';
paths.gitProjectDir = '.git';
paths.gitIgnore = '.gitignore';
paths.packageLockJson = 'package-lock.json';
paths.regenTargets = [`${paths.configs}/*.js`];
const CLI_BANNER = `/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/\n\n`;
const readFileAsync = (0, _util.promisify)(_fs.readFile);

const cleanTypes = async () => {
  const targets = (0, _parseGitignore.default)((await readFileAsync(paths.flowTypedGitIgnore)));
  (0, _fancyLog.default)(`Deletion targets @ ${paths.flowTyped}/: "${targets.join('" "')}"`);
  await (0, _del.default)(targets, {
    cwd: paths.flowTyped
  });
};

exports.cleanTypes = cleanTypes;
cleanTypes.description = `Resets the ${paths.flowTyped} directory to a pristine state`;

const cleanBuild = async () => {
  (0, _fancyLog.default)(`Deletion targets @ ${paths.build}/*`);
  await (0, _del.default)('*', {
    cwd: paths.build
  });
};

exports.cleanBuild = cleanBuild;
cleanBuild.description = `Resets the ${paths.build} directory to a pristine state`;

const regenerate = () => {
  (0, _fancyLog.default)(`Regenerating targets: "${paths.regenTargets.join('" "')}"`);
  process.env.BABEL_ENV = 'generator';
  return _gulp.default.src(paths.regenTargets).pipe((0, _gulpTap.default)(file => file.contents = Buffer.from(CLI_BANNER + (0, _core.transformSync)(file.contents.toString(), {
    sourceFileName: (0, _path.relative)(__dirname, file.path)
  }).code))).pipe(_gulp.default.dest('.'));
};

exports.regenerate = regenerate;
regenerate.description = 'Invokes babel on the files in config, transpiling them into their project root versions';

const build = () => {
  process.env.NODE_ENV = 'production';
  return new Promise(resolve => {
    (0, _webpack.default)(configured, (err, stats) => {
      if (err) {
        const details = err.details ? `\n\t${err.details}` : '';
        throw `WEBPACK FATAL BUILD ERROR: ${err}${details}`;
      }

      const info = stats.toJson();
      if (stats.hasErrors()) throw `WEBPACK COMPILATION ERROR: ${info.errors}`;
      if (stats.hasWarnings()) console.warn(`WEBPACK COMPILATION WARNING: ${info.warnings}`);
      resolve();
    });
  });
};

exports.build = build;
build.description = 'Yields a production-ready unpacked extension via the build directory';

const bundleZip = async () => {
  await (0, _del.default)([`${_package.default.name}-*.zip`]).then(() => {
    _gulp.default.src('build/**/*').pipe((0, _gulpZip.default)(`${_package.default.name}-${_package.default.version}.zip`)).pipe(_gulp.default.dest('.'));
  });
};

exports.bundleZip = bundleZip;
bundleZip.description = 'Bundles the build directory into a zip archive for upload to the Chrome Web Store and elsewhere';

const wpdevserv = () => {
  var _configured$plugins;

  Object.keys(configured.entry).forEach(entryKey => configured.entry[entryKey] = [`webpack-dev-server/client?http://${DEV_ENDPOINT}:${DEV_PORT}`, 'webpack/hot/dev-server'].concat(configured.entry[entryKey]));
  configured.plugins = [new _webpack.default.HotModuleReplacementPlugin(), ...((_configured$plugins = configured.plugins) !== null && _configured$plugins !== void 0 ? _configured$plugins : [])];
  const packer = (0, _webpack.default)(configured);
  const server = new _webpackDevServer.default(packer, {
    disableHostCheck: true,
    hot: true,
    contentBase: (0, _path.join)(__dirname, paths.build),
    headers: {
      'Access-Control-Allow-Origin': '*'
    },
    publicPath: `http://${DEV_ENDPOINT}:${DEV_PORT}/`,
    sockHost: DEV_ENDPOINT,
    sockPort: DEV_PORT
  });
  server.listen(DEV_PORT, '0.0.0.0', err => {
    if (err) throw `WEBPACK DEV SERVER ERROR: ${err}`;
  });
};

exports.wpdevserv = wpdevserv;
wpdevserv.description = 'Launches the Webpack Development Server for testing purposes';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,