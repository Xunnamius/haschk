/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.build = exports.wpdevserv = exports.cleanBuild = exports.cleanTypes = exports.regenerate = void 0;

require("source-map-support/register");

var _fs = require("fs");

var _util = require("util");

var _gulp = _interopRequireDefault(require("gulp"));

var _gulpTap = _interopRequireDefault(require("gulp-tap"));

var _del = _interopRequireDefault(require("del"));

var _fancyLog = _interopRequireDefault(require("fancy-log"));

var _parseGitignore = _interopRequireDefault(require("parse-gitignore"));

var _core = require("@babel/core");

var _path = require("path");

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackDevServer = _interopRequireDefault(require("webpack-dev-server"));

var _webpack2 = _interopRequireDefault(require("./webpack.config"));

var _documentation = _interopRequireDefault(require("documentation"));

var _streamArray = _interopRequireDefault(require("stream-array"));

var _vinylFs = _interopRequireDefault(require("vinyl-fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();

const {
  WEBPACK_PORT,
  DEV_ENDPOINT
} = process.env;
if (typeof WEBPACK_PORT !== 'string') throw new TypeError('WEBPACK_PORT is improperly defined');
if (typeof DEV_ENDPOINT !== 'string') throw new TypeError('DEV_ENDPOINT is improperly defined');
const DEV_PORT = parseInt(WEBPACK_PORT, 10);
const paths = {};
paths.flowTyped = 'flow-typed';
paths.flowTypedGitIgnore = `${paths.flowTyped}/.gitignore`;
paths.build = `build`;
paths.buildGitIgnore = `${paths.build}/.gitignore`;
paths.configs = 'config';
paths.docs = 'docs/documentation';
paths.packageJson = 'package.json';
paths.launchJson = '.vscode/launch.json';
paths.launchJsonDist = '.vscode/launch.dist.json';
paths.env = '.env';
paths.envDist = 'dist.env';
paths.gitProjectDir = '.git';
paths.gitIgnore = '.gitignore';
paths.packageLockJson = 'package-lock.json';
paths.build = `${__dirname}/build`;
paths.regenTargets = [`${paths.configs}/*.js`];

const generateDocs = () => {
  let entryPaths = Object.values(_webpack2.default.entry).slice().map(entry => {
    var _entry$slice$pop;

    return (_entry$slice$pop = entry.slice().pop()) !== null && _entry$slice$pop !== void 0 ? _entry$slice$pop : "";
  });
  return _documentation.default.build(entryPaths, {
    shallow: true
  }).then(_documentation.default.formats.html).then(output => {
    (0, _streamArray.default)(output).pipe(_vinylFs.default.dest(paths.docs));
  }).catch(function (err) {
    console.log(err);
  });
};

const CLI_BANNER = `/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/\n\n`;
const readFileAsync = (0, _util.promisify)(_fs.readFile);

const cleanTypes = async () => {
  const targets = (0, _parseGitignore.default)((await readFileAsync(paths.flowTypedGitIgnore)));
  (0, _fancyLog.default)(`Deletion targets @ ${paths.flowTyped}/: "${targets.join('" "')}"`);
  (0, _del.default)(targets, {
    cwd: paths.flowTyped
  });
};

exports.cleanTypes = cleanTypes;
cleanTypes.description = `Resets the ${paths.flowTyped} directory to a pristine state`;

const cleanBuild = async () => {
  const targets = (0, _parseGitignore.default)((await readFileAsync(paths.buildGitIgnore)));
  (0, _fancyLog.default)(`Deletion targets @ ${paths.build}/: "${targets.join('" "')}"`);
  (0, _del.default)(targets, {
    cwd: paths.build
  });
};

exports.cleanBuild = cleanBuild;
cleanTypes.description = `Resets the ${paths.flowTyped} directory to a pristine state`;

const regenerate = () => {
  (0, _fancyLog.default)(`Regenerating targets: "${paths.regenTargets.join('" "')}"`);
  process.env.BABEL_ENV = 'generator';
  return _gulp.default.src(paths.regenTargets).pipe((0, _gulpTap.default)(file => file.contents = Buffer.from(CLI_BANNER + (0, _core.transformSync)(file.contents.toString(), {
    sourceFileName: (0, _path.relative)(__dirname, file.path)
  }).code))).pipe(_gulp.default.dest('.'));
};

exports.regenerate = regenerate;
regenerate.description = 'Invokes babel on the files in config, transpiling them into their project root versions';

const build = () => {
  process.env.NODE_ENV = 'production';
  return new Promise(resolve => {
    (0, _webpack.default)(_webpack2.default, (err, stats) => {
      if (err) {
        const details = err.details ? `\n\t${err.details}` : '';
        throw `WEBPACK FATAL BUILD ERROR: ${err}${details}`;
      }

      const info = stats.toJson();
      if (stats.hasErrors()) throw `WEBPACK COMPILATION ERROR: ${info.errors}`;
      if (stats.hasWarnings()) console.warn(`WEBPACK COMPILATION WARNING: ${info.warnings}`);
      resolve();
    });
  });
};

exports.build = build;
build.description = 'Yields a production-ready extension ready to be packaged';

const wpdevserv = () => {
  var _config$plugins;

  Object.keys(_webpack2.default.entry).forEach(entryKey => _webpack2.default.entry[entryKey] = [`webpack-dev-server/client?http://${DEV_ENDPOINT}:${DEV_PORT}`, 'webpack/hot/dev-server', _webpack2.default.entry[entryKey]]);
  _webpack2.default.plugins = [new _webpack.default.HotModuleReplacementPlugin(), ...((_config$plugins = _webpack2.default.plugins) !== null && _config$plugins !== void 0 ? _config$plugins : [])];
  const packer = (0, _webpack.default)(_webpack2.default);
  packer.hooks.afterCompile.tap('Generate Docs', () => {
    generateDocs();
  });
  const server = new _webpackDevServer.default(packer, {
    hot: true,
    contentBase: paths.build,
    headers: {
      'Access-Control-Allow-Origin': '*'
    }
  });
  server.listen(DEV_PORT, err => {
    if (err) throw `WEBPACK DEV SERVER ERROR: ${err}`;
  });
};

exports.wpdevserv = wpdevserv;
wpdevserv.description = 'Launches the Webpack Development Server for testing purposes';
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9ndWxwZmlsZS5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwiV0VCUEFDS19QT1JUIiwiREVWX0VORFBPSU5UIiwicHJvY2VzcyIsImVudiIsIlR5cGVFcnJvciIsIkRFVl9QT1JUIiwicGFyc2VJbnQiLCJwYXRocyIsImZsb3dUeXBlZCIsImZsb3dUeXBlZEdpdElnbm9yZSIsImJ1aWxkIiwiYnVpbGRHaXRJZ25vcmUiLCJjb25maWdzIiwicGFja2FnZUpzb24iLCJsYXVuY2hKc29uIiwibGF1bmNoSnNvbkRpc3QiLCJlbnZEaXN0IiwiZ2l0UHJvamVjdERpciIsImdpdElnbm9yZSIsInBhY2thZ2VMb2NrSnNvbiIsIl9fZGlybmFtZSIsInJlZ2VuVGFyZ2V0cyIsIkNMSV9CQU5ORVIiLCJyZWFkRmlsZUFzeW5jIiwicmVhZEZpbGUiLCJjbGVhblR5cGVzIiwidGFyZ2V0cyIsImpvaW4iLCJjd2QiLCJkZXNjcmlwdGlvbiIsImNsZWFuQnVpbGQiLCJyZWdlbmVyYXRlIiwiQkFCRUxfRU5WIiwiZ3VscCIsInNyYyIsInBpcGUiLCJmaWxlIiwiY29udGVudHMiLCJCdWZmZXIiLCJmcm9tIiwidG9TdHJpbmciLCJzb3VyY2VGaWxlTmFtZSIsInBhdGgiLCJjb2RlIiwiZGVzdCIsIk5PREVfRU5WIiwiUHJvbWlzZSIsInJlc29sdmUiLCJlcnIiLCJzdGF0cyIsImRldGFpbHMiLCJpbmZvIiwidG9Kc29uIiwiaGFzRXJyb3JzIiwiZXJyb3JzIiwiaGFzV2FybmluZ3MiLCJjb25zb2xlIiwid2FybiIsIndhcm5pbmdzIiwid3BkZXZzZXJ2IiwiT2JqZWN0Iiwia2V5cyIsImVudHJ5IiwiZm9yRWFjaCIsImVudHJ5S2V5IiwicGx1Z2lucyIsIndlYnBhY2siLCJIb3RNb2R1bGVSZXBsYWNlbWVudFBsdWdpbiIsInBhY2tlciIsInNlcnZlciIsIndlYnBhY2tEZXZTZXJ2ZXIiLCJob3QiLCJjb250ZW50QmFzZSIsImhlYWRlcnMiLCJsaXN0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V0FBVixHQUF3Qiw4REFBeEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG4vLyA/IFRvIHJlZ2VuZXJhdGUgdGhpcyBmaWxlIChpLmUuIGlmIHlvdSBjaGFuZ2VkIGl0IGFuZCB3YW50IHlvdXIgY2hhbmdlcyB0b1xuLy8gPyBiZSBwZXJtYW5lbnQpLCBjYWxsIGBucG0gcnVuIHJlZ2VuZXJhdGVgIGFmdGVyd2FyZHNcblxuLy8gISBCZSBzdXJlIHRoYXQgdGFza3MgZXhwZWN0ZWQgdG8gcnVuIG9uIG5wbSBpbnN0YWxsIChtYXJrZWQgQGRlcGVuZGVudCkgaGF2ZVxuLy8gISBhbGwgcmVxdWlyZWQgcGFja2FnZXMgbGlzdGVkIHVuZGVyIFwiZGVwZW5kZW5jaWVzXCIgaW5zdGVhZCBvZlxuLy8gISBcImRldkRlcGVuZGVuY2llc1wiIGluIHRoaXMgcHJvamVjdCdzIHBhY2thZ2UuanNvblxuXG5pbXBvcnQgeyByZWFkRmlsZSB9IGZyb20gJ2ZzJ1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCdcbmltcG9ydCBndWxwIGZyb20gJ2d1bHAnXG5pbXBvcnQgdGFwIGZyb20gJ2d1bHAtdGFwJ1xuaW1wb3J0IGRlbCBmcm9tICdkZWwnXG5pbXBvcnQgbG9nIGZyb20gJ2ZhbmN5LWxvZydcbmltcG9ydCBwYXJzZUdpdElnbm9yZSBmcm9tICdwYXJzZS1naXRpZ25vcmUnXG5pbXBvcnQgeyB0cmFuc2Zvcm1TeW5jIGFzIGJhYmVsIH0gZnJvbSAnQGJhYmVsL2NvcmUnXG5pbXBvcnQgeyByZWxhdGl2ZSBhcyByZWxQYXRoIH0gZnJvbSAncGF0aCdcbmltcG9ydCB3ZWJwYWNrIGZyb20gJ3dlYnBhY2snXG5pbXBvcnQgd2VicGFja0RldlNlcnZlciBmcm9tICd3ZWJwYWNrLWRldi1zZXJ2ZXInXG5pbXBvcnQgY29uZmlnIGZyb20gJy4vd2VicGFjay5jb25maWcnXG5cbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xuXG5jb25zdCB7IFdFQlBBQ0tfUE9SVCwgREVWX0VORFBPSU5UIH0gPSBwcm9jZXNzLmVudjtcblxuaWYodHlwZW9mIFdFQlBBQ0tfUE9SVCAhPT0gJ3N0cmluZycpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignV0VCUEFDS19QT1JUIGlzIGltcHJvcGVybHkgZGVmaW5lZCcpO1xuXG5pZih0eXBlb2YgREVWX0VORFBPSU5UICE9PSAnc3RyaW5nJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdERVZfRU5EUE9JTlQgaXMgaW1wcm9wZXJseSBkZWZpbmVkJyk7XG5cbmNvbnN0IERFVl9QT1JUID0gcGFyc2VJbnQoV0VCUEFDS19QT1JULCAxMCk7XG5cbmNvbnN0IHBhdGhzID0ge307XG5cbnBhdGhzLmZsb3dUeXBlZCA9ICdmbG93LXR5cGVkJztcbnBhdGhzLmZsb3dUeXBlZEdpdElnbm9yZSA9IGAke3BhdGhzLmZsb3dUeXBlZH0vLmdpdGlnbm9yZWA7XG5wYXRocy5idWlsZCA9IGBidWlsZGA7XG5wYXRocy5idWlsZEdpdElnbm9yZSA9IGAke3BhdGhzLmJ1aWxkfS8uZ2l0aWdub3JlYDtcbnBhdGhzLmNvbmZpZ3MgPSAnY29uZmlnJztcbnBhdGhzLnBhY2thZ2VKc29uID0gJ3BhY2thZ2UuanNvbic7XG5wYXRocy5sYXVuY2hKc29uID0gJy52c2NvZGUvbGF1bmNoLmpzb24nO1xucGF0aHMubGF1bmNoSnNvbkRpc3QgPSAnLnZzY29kZS9sYXVuY2guZGlzdC5qc29uJztcbnBhdGhzLmVudiA9ICcuZW52JztcbnBhdGhzLmVudkRpc3QgPSAnZGlzdC5lbnYnO1xucGF0aHMuZ2l0UHJvamVjdERpciA9ICcuZ2l0JztcbnBhdGhzLmdpdElnbm9yZSA9ICcuZ2l0aWdub3JlJztcbnBhdGhzLnBhY2thZ2VMb2NrSnNvbiA9ICdwYWNrYWdlLWxvY2suanNvbic7XG5wYXRocy5idWlsZCA9IGAke19fZGlybmFtZX0vYnVpbGRgO1xuXG5wYXRocy5yZWdlblRhcmdldHMgPSBbXG4gICAgYCR7cGF0aHMuY29uZmlnc30vKi5qc2Bcbl07XG5cbmNvbnN0IENMSV9CQU5ORVIgPSBgLyoqXG4qICEhISBETyBOT1QgRURJVCBUSElTIEZJTEUgRElSRUNUTFkgISEhXG4qICEgVGhpcyBmaWxlIGhhcyBiZWVuIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LiBTZWUgdGhlIGNvbmZpZy8qLmpzIHZlcnNpb24gb2ZcbiogISB0aGlzIGZpbGUgdG8gbWFrZSBwZXJtYW5lbnQgbW9kaWZpY2F0aW9ucyFcbiovXFxuXFxuYDtcblxuY29uc3QgcmVhZEZpbGVBc3luYyA9IHByb21pc2lmeShyZWFkRmlsZSk7XG5cbi8vICogQ0xFQU5UWVBFU1xuXG5jb25zdCBjbGVhblR5cGVzID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldHMgPSBwYXJzZUdpdElnbm9yZShhd2FpdCByZWFkRmlsZUFzeW5jKHBhdGhzLmZsb3dUeXBlZEdpdElnbm9yZSkpO1xuXG4gICAgbG9nKGBEZWxldGlvbiB0YXJnZXRzIEAgJHtwYXRocy5mbG93VHlwZWR9LzogXCIke3RhcmdldHMuam9pbignXCIgXCInKX1cImApO1xuICAgIGRlbCh0YXJnZXRzLCB7IGN3ZDogcGF0aHMuZmxvd1R5cGVkIH0pO1xufTtcblxuY2xlYW5UeXBlcy5kZXNjcmlwdGlvbiA9IGBSZXNldHMgdGhlICR7cGF0aHMuZmxvd1R5cGVkfSBkaXJlY3RvcnkgdG8gYSBwcmlzdGluZSBzdGF0ZWA7XG5cbi8vICogQ0xFQU5CVUlMRFxuXG5jb25zdCBjbGVhbkJ1aWxkID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRhcmdldHMgPSBwYXJzZUdpdElnbm9yZShhd2FpdCByZWFkRmlsZUFzeW5jKHBhdGhzLmJ1aWxkR2l0SWdub3JlKSk7XG5cbiAgICBsb2coYERlbGV0aW9uIHRhcmdldHMgQCAke3BhdGhzLmJ1aWxkfS86IFwiJHt0YXJnZXRzLmpvaW4oJ1wiIFwiJyl9XCJgKTtcbiAgICBkZWwodGFyZ2V0cywgeyBjd2Q6IHBhdGhzLmJ1aWxkIH0pO1xufTtcblxuY2xlYW5UeXBlcy5kZXNjcmlwdGlvbiA9IGBSZXNldHMgdGhlICR7cGF0aHMuZmxvd1R5cGVkfSBkaXJlY3RvcnkgdG8gYSBwcmlzdGluZSBzdGF0ZWA7XG5cbi8vICogUkVHRU5FUkFURVxuXG4vLyA/IElmIHlvdSBjaGFuZ2UgdGhpcyBmdW5jdGlvbiwgcnVuIGBucG0gcnVuIHJlZ2VuZXJhdGVgIHR3aWNlOiBvbmNlIHRvXG4vLyA/IGNvbXBpbGUgdGhpcyBuZXcgZnVuY3Rpb24gYW5kIG9uY2UgYWdhaW4gdG8gY29tcGlsZSBpdHNlbGYgd2l0aCB0aGUgbmV3bHlcbi8vID8gY29tcGlsZWQgbG9naWMuIElmIHRoZXJlIGlzIGFuIGVycm9yIHRoYXQgcHJldmVudHMgcmVnZW5lcmF0aW9uLCB5b3UgY2FuXG4vLyA/IHJ1biBgbnBtIHJ1biBnZW5lcmF0ZWAgdGhlbiBgbnBtIHJ1biByZWdlbmVyYXRlYCBpbnN0ZWFkLlxuY29uc3QgcmVnZW5lcmF0ZSA9ICgpID0+IHtcbiAgICBsb2coYFJlZ2VuZXJhdGluZyB0YXJnZXRzOiBcIiR7cGF0aHMucmVnZW5UYXJnZXRzLmpvaW4oJ1wiIFwiJyl9XCJgKTtcblxuICAgIHByb2Nlc3MuZW52LkJBQkVMX0VOViA9ICdnZW5lcmF0b3InO1xuXG4gICAgcmV0dXJuIGd1bHAuc3JjKHBhdGhzLnJlZ2VuVGFyZ2V0cylcbiAgICAgICAgICAgICAgIC5waXBlKHRhcChmaWxlID0+IGZpbGUuY29udGVudHMgPSBCdWZmZXIuZnJvbShDTElfQkFOTkVSICsgYmFiZWwoZmlsZS5jb250ZW50cy50b1N0cmluZygpLCB7XG4gICAgICAgICAgICAgICAgICAgc291cmNlRmlsZU5hbWU6IHJlbFBhdGgoX19kaXJuYW1lLCBmaWxlLnBhdGgpXG4gICAgICAgICAgICAgICB9KS5jb2RlKSkpXG4gICAgICAgICAgICAgICAucGlwZShndWxwLmRlc3QoJy4nKSk7XG59O1xuXG5yZWdlbmVyYXRlLmRlc2NyaXB0aW9uID0gJ0ludm9rZXMgYmFiZWwgb24gdGhlIGZpbGVzIGluIGNvbmZpZywgdHJhbnNwaWxpbmcgdGhlbSBpbnRvIHRoZWlyIHByb2plY3Qgcm9vdCB2ZXJzaW9ucyc7XG5cbi8vICogQlVJTEQgKHByb2R1Y3Rpb24pXG5cbmNvbnN0IGJ1aWxkOiBQcm9taXNlID0gKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Byb2R1Y3Rpb24nO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgd2VicGFjayhjb25maWcsIChlcnIsIHN0YXRzKSA9PiB7XG4gICAgICAgICAgICBpZihlcnIpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGV0YWlscyA9IGVyci5kZXRhaWxzID8gYFxcblxcdCR7ZXJyLmRldGFpbHN9YCA6ICcnO1xuICAgICAgICAgICAgICAgIHRocm93IGBXRUJQQUNLIEZBVEFMIEJVSUxEIEVSUk9SOiAke2Vycn0ke2RldGFpbHN9YDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaW5mbyA9IHN0YXRzLnRvSnNvbigpO1xuXG4gICAgICAgICAgICBpZihzdGF0cy5oYXNFcnJvcnMoKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBgV0VCUEFDSyBDT01QSUxBVElPTiBFUlJPUjogJHtpbmZvLmVycm9yc31gO1xuXG4gICAgICAgICAgICBpZihzdGF0cy5oYXNXYXJuaW5ncygpKVxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgV0VCUEFDSyBDT01QSUxBVElPTiBXQVJOSU5HOiAke2luZm8ud2FybmluZ3N9YClcblxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cbmJ1aWxkLmRlc2NyaXB0aW9uID0gJ1lpZWxkcyBhIHByb2R1Y3Rpb24tcmVhZHkgZXh0ZW5zaW9uIHJlYWR5IHRvIGJlIHBhY2thZ2VkJztcblxuLy8gKiBXUERFVlNFUlZcblxuY29uc3Qgd3BkZXZzZXJ2ID0gKCkgPT4ge1xuICAgIE9iamVjdC5rZXlzKGNvbmZpZy5lbnRyeSkuZm9yRWFjaChlbnRyeUtleSA9PiBjb25maWcuZW50cnlbZW50cnlLZXldID0gW1xuICAgICAgICBgd2VicGFjay1kZXYtc2VydmVyL2NsaWVudD9odHRwOi8vJHtERVZfRU5EUE9JTlR9OiR7REVWX1BPUlR9YCxcbiAgICAgICAgJ3dlYnBhY2svaG90L2Rldi1zZXJ2ZXInLFxuICAgICAgICBjb25maWcuZW50cnlbZW50cnlLZXldXG4gICAgXSk7XG5cbiAgICBjb25maWcucGx1Z2lucyA9IFtcbiAgICAgICAgbmV3IHdlYnBhY2suSG90TW9kdWxlUmVwbGFjZW1lbnRQbHVnaW4oKSxcbiAgICAgICAgLi4uKGNvbmZpZy5wbHVnaW5zID8/IFtdKVxuICAgIF07XG5cbiAgICBjb25zdCBwYWNrZXIgPSB3ZWJwYWNrKGNvbmZpZyk7XG4gICAgY29uc3Qgc2VydmVyID0gbmV3IHdlYnBhY2tEZXZTZXJ2ZXIocGFja2VyLCB7XG4gICAgICAgIGhvdDogdHJ1ZSxcbiAgICAgICAgY29udGVudEJhc2U6IHBhdGhzLmJ1aWxkLFxuICAgICAgICBoZWFkZXJzOiB7ICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicgfVxuICAgIH0pO1xuXG4gICAgc2VydmVyLmxpc3RlbihERVZfUE9SVCwgZXJyID0+IHsgaWYoZXJyKSB0aHJvdyBgV0VCUEFDSyBERVYgU0VSVkVSIEVSUk9SOiAke2Vycn1gIH0pO1xufTtcblxud3BkZXZzZXJ2LmRlc2NyaXB0aW9uID0gJ0xhdW5jaGVzIHRoZSBXZWJwYWNrIERldmVsb3BtZW50IFNlcnZlciBmb3IgdGVzdGluZyBwdXJwb3Nlcyc7XG5cbmV4cG9ydCB7IHJlZ2VuZXJhdGUsIGNsZWFuVHlwZXMsIGNsZWFuQnVpbGQsIHdwZGV2c2VydiwgYnVpbGQgfTtcbiJdfQ==
>>>>>>> 1048f85297c74f7b3bbfffe82923f06490ca470b
